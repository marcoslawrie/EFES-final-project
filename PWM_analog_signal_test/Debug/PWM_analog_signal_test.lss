
PWM_analog_signal_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  00800100  00800100  0000074c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000080d  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000476  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057b  00000000  00000000  0000152f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000499  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000557  00000000  00000000  0000217d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 31       	cpi	r26, 0x16	; 22
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  a6:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <_Z10BufferReadP5u8bufPVh>:
	
}

uint8_t BufferRead(u8buf *buf, volatile uint8_t *u8data)

{
  ae:	fc 01       	movw	r30, r24

	if(buf->index>0)
  b0:	84 89       	ldd	r24, Z+20	; 0x14
  b2:	88 23       	and	r24, r24
  b4:	59 f0       	breq	.+22     	; 0xcc <_Z10BufferReadP5u8bufPVh+0x1e>

	{

		buf->index--;
  b6:	84 89       	ldd	r24, Z+20	; 0x14
  b8:	81 50       	subi	r24, 0x01	; 1
  ba:	84 8b       	std	Z+20, r24	; 0x14

		*u8data=buf->buffer[buf->index];
  bc:	84 89       	ldd	r24, Z+20	; 0x14
  be:	e8 0f       	add	r30, r24
  c0:	f1 1d       	adc	r31, r1
  c2:	80 81       	ld	r24, Z
  c4:	fb 01       	movw	r30, r22
  c6:	80 83       	st	Z, r24

		return 0;
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret

	}

	else return 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1

  ce:	08 95       	ret

000000d0 <main>:
#define LENGTH 256 // Length of the wave lookup table
uint8_t wave[LENGTH]; // Storage for waveform


int main(void)
{
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	11 e0       	ldi	r17, 0x01	; 1
	
	/* Populate the waveform table with a sine wave */
	for (int i=0; i<LENGTH; i++) { // Step across wave table
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
		float v = (AMP*(0.85*sin((PI2/LENGTH)*i)+0.15*sin((15*PI2/LENGTH)*i))); // Compute value
  d8:	be 01       	movw	r22, r28
  da:	0d 2e       	mov	r0, r29
  dc:	00 0c       	add	r0, r0
  de:	88 0b       	sbc	r24, r24
  e0:	99 0b       	sbc	r25, r25
  e2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__floatsisf>
  e6:	6b 01       	movw	r12, r22
  e8:	7c 01       	movw	r14, r24
  ea:	2a ed       	ldi	r18, 0xDA	; 218
  ec:	3f e0       	ldi	r19, 0x0F	; 15
  ee:	49 ec       	ldi	r20, 0xC9	; 201
  f0:	5c e3       	ldi	r21, 0x3C	; 60
  f2:	0e 94 6d 02 	call	0x4da	; 0x4da <__mulsf3>
  f6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <sin>
  fa:	4b 01       	movw	r8, r22
  fc:	5c 01       	movw	r10, r24
  fe:	2c ed       	ldi	r18, 0xDC	; 220
 100:	3e e7       	ldi	r19, 0x7E	; 126
 102:	4c eb       	ldi	r20, 0xBC	; 188
 104:	5e e3       	ldi	r21, 0x3E	; 62
 106:	c7 01       	movw	r24, r14
 108:	b6 01       	movw	r22, r12
 10a:	0e 94 6d 02 	call	0x4da	; 0x4da <__mulsf3>
 10e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <sin>
 112:	6b 01       	movw	r12, r22
 114:	7c 01       	movw	r14, r24
 116:	2a e9       	ldi	r18, 0x9A	; 154
 118:	39 e9       	ldi	r19, 0x99	; 153
 11a:	49 e5       	ldi	r20, 0x59	; 89
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	c5 01       	movw	r24, r10
 120:	b4 01       	movw	r22, r8
 122:	0e 94 6d 02 	call	0x4da	; 0x4da <__mulsf3>
 126:	4b 01       	movw	r8, r22
 128:	5c 01       	movw	r10, r24
 12a:	2a e9       	ldi	r18, 0x9A	; 154
 12c:	39 e9       	ldi	r19, 0x99	; 153
 12e:	49 e1       	ldi	r20, 0x19	; 25
 130:	5e e3       	ldi	r21, 0x3E	; 62
 132:	c7 01       	movw	r24, r14
 134:	b6 01       	movw	r22, r12
 136:	0e 94 6d 02 	call	0x4da	; 0x4da <__mulsf3>
 13a:	9b 01       	movw	r18, r22
 13c:	ac 01       	movw	r20, r24
 13e:	c5 01       	movw	r24, r10
 140:	b4 01       	movw	r22, r8
 142:	0e 94 3d 01 	call	0x27a	; 0x27a <__addsf3>
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	4e ef       	ldi	r20, 0xFE	; 254
 14c:	52 e4       	ldi	r21, 0x42	; 66
 14e:	0e 94 6d 02 	call	0x4da	; 0x4da <__mulsf3>
		wave[i] = int(v+OFFSET); // Store value as integer
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	0e 94 3d 01 	call	0x27a	; 0x27a <__addsf3>
 15e:	0e 94 a9 01 	call	0x352	; 0x352 <__fixsfsi>
 162:	f8 01       	movw	r30, r16
 164:	61 93       	st	Z+, r22
 166:	8f 01       	movw	r16, r30

int main(void)
{
	
	/* Populate the waveform table with a sine wave */
	for (int i=0; i<LENGTH; i++) { // Step across wave table
 168:	21 96       	adiw	r28, 0x01	; 1
 16a:	c1 15       	cp	r28, r1
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	df 07       	cpc	r29, r31
 170:	09 f0       	breq	.+2      	; 0x174 <main+0xa4>
 172:	b2 cf       	rjmp	.-156    	; 0xd8 <main+0x8>
		wave[i] = int(v+OFFSET); // Store value as integer
	}
	
	
	
	fastPWMStart_T1();
 174:	0e 94 c1 00 	call	0x182	; 0x182 <_Z15fastPWMStart_T1v>
	timer2Init();
 178:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z10timer2Initv>
	timer2SetIntOnMatch();
 17c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z19timer2SetIntOnMatchv>

	
    while (1) 
    {
		
    }
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0xb0>

00000182 <_Z15fastPWMStart_T1v>:

/****Set timer1 for 8-bit fast PWM output ****/
void fastPWMStart_T1(void){
	
	// Set PB1 to be an output (Pin9 Arduino UNO)
	DDRB |= (1 << DDB1);
 182:	21 9a       	sbi	0x04, 1	; 4
	
	TCCR1B = (1 << CS10); // Set prescaler to full 16MHz
 184:	a1 e8       	ldi	r26, 0x81	; 129
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1A1); // Pin low when TCNT1=OCR1A
 18c:	e0 e8       	ldi	r30, 0x80	; 128
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 68       	ori	r24, 0x80	; 128
 194:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM10); // Use 8-bit fast PWM mode
 196:	80 81       	ld	r24, Z
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12);
 19c:	8c 91       	ld	r24, X
 19e:	88 60       	ori	r24, 0x08	; 8
 1a0:	8c 93       	st	X, r24
 1a2:	08 95       	ret

000001a4 <_Z10timer2Initv>:
void timer2SetIntOnMatch(){
	TIMSK2 = (1 << OCIE2A); // Call ISR when TCNT2 = OCRA2
	sei(); // Enable interrupts to generate waveform!
}
void setTOPValue(uint8_t top){
	OCR2A = top; // Set frequency of generated wave
 1a4:	10 92 b0 00 	sts	0x00B0, r1
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 93 b1 00 	sts	0x00B1, r24
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	80 93 b3 00 	sts	0x00B3, r24
 1b4:	08 95       	ret

000001b6 <_Z19timer2SetIntOnMatchv>:
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 93 70 00 	sts	0x0070, r24
 1bc:	78 94       	sei
 1be:	08 95       	ret

000001c0 <__vector_7>:
}

ISR(TIMER2_COMPA_vect) { // Called when TCNT2 == OCR2A
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	static uint8_t index=0; // Points to each table entry. WE DONT NEED TO RESET THE VALUE OF INDEX BECAUSE IT IS An 8 BIT VARIABLE AND WAVE HAS 256 ELEMENTS
	OCR1AL = wave[index++]; // Update the PWM output
 1d0:	e0 91 00 02 	lds	r30, 0x0200
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	8e 0f       	add	r24, r30
 1d8:	80 93 00 02 	sts	0x0200, r24
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	e0 50       	subi	r30, 0x00	; 0
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	80 81       	ld	r24, Z
 1e4:	80 93 88 00 	sts	0x0088, r24
	asm("NOP;NOP"); // Fine tuning
 1e8:	00 00       	nop
	TCNT2 = 6; // Timing to compensate for ISR run time
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	80 93 b2 00 	sts	0x00B2, r24
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_19>:
	
}


ISR(USART_UDRE_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	1f 92       	push	r1
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62

		uint8_t data;
		if(!BufferRead(&tx_buffer,&data)){
 22c:	be 01       	movw	r22, r28
 22e:	6f 5f       	subi	r22, 0xFF	; 255
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	0e 94 57 00 	call	0xae	; 0xae <_Z10BufferReadP5u8bufPVh>
 23a:	81 11       	cpse	r24, r1
 23c:	04 c0       	rjmp	.+8      	; 0x246 <__vector_19+0x46>
			UDR0 = data;
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	80 93 c6 00 	sts	0x00C6, r24
 244:	05 c0       	rjmp	.+10     	; 0x250 <__vector_19+0x50>
		}
		else{ 
			//all data has been transmitted, disable the interrupt
			UCSR0B &= ~DATA_REGISTER_EMPTY_INTERRUPT; 
 246:	e1 ec       	ldi	r30, 0xC1	; 193
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	80 83       	st	Z, r24
		}
	   
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__subsf3>:
 278:	50 58       	subi	r21, 0x80	; 128

0000027a <__addsf3>:
 27a:	bb 27       	eor	r27, r27
 27c:	aa 27       	eor	r26, r26
 27e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3x>
 282:	0c 94 33 02 	jmp	0x466	; 0x466 <__fp_round>
 286:	0e 94 25 02 	call	0x44a	; 0x44a <__fp_pscA>
 28a:	38 f0       	brcs	.+14     	; 0x29a <__addsf3+0x20>
 28c:	0e 94 2c 02 	call	0x458	; 0x458 <__fp_pscB>
 290:	20 f0       	brcs	.+8      	; 0x29a <__addsf3+0x20>
 292:	39 f4       	brne	.+14     	; 0x2a2 <__addsf3+0x28>
 294:	9f 3f       	cpi	r25, 0xFF	; 255
 296:	19 f4       	brne	.+6      	; 0x29e <__addsf3+0x24>
 298:	26 f4       	brtc	.+8      	; 0x2a2 <__addsf3+0x28>
 29a:	0c 94 22 02 	jmp	0x444	; 0x444 <__fp_nan>
 29e:	0e f4       	brtc	.+2      	; 0x2a2 <__addsf3+0x28>
 2a0:	e0 95       	com	r30
 2a2:	e7 fb       	bst	r30, 7
 2a4:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_inf>

000002a8 <__addsf3x>:
 2a8:	e9 2f       	mov	r30, r25
 2aa:	0e 94 44 02 	call	0x488	; 0x488 <__fp_split3>
 2ae:	58 f3       	brcs	.-42     	; 0x286 <__addsf3+0xc>
 2b0:	ba 17       	cp	r27, r26
 2b2:	62 07       	cpc	r22, r18
 2b4:	73 07       	cpc	r23, r19
 2b6:	84 07       	cpc	r24, r20
 2b8:	95 07       	cpc	r25, r21
 2ba:	20 f0       	brcs	.+8      	; 0x2c4 <__addsf3x+0x1c>
 2bc:	79 f4       	brne	.+30     	; 0x2dc <__addsf3x+0x34>
 2be:	a6 f5       	brtc	.+104    	; 0x328 <__addsf3x+0x80>
 2c0:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_zero>
 2c4:	0e f4       	brtc	.+2      	; 0x2c8 <__addsf3x+0x20>
 2c6:	e0 95       	com	r30
 2c8:	0b 2e       	mov	r0, r27
 2ca:	ba 2f       	mov	r27, r26
 2cc:	a0 2d       	mov	r26, r0
 2ce:	0b 01       	movw	r0, r22
 2d0:	b9 01       	movw	r22, r18
 2d2:	90 01       	movw	r18, r0
 2d4:	0c 01       	movw	r0, r24
 2d6:	ca 01       	movw	r24, r20
 2d8:	a0 01       	movw	r20, r0
 2da:	11 24       	eor	r1, r1
 2dc:	ff 27       	eor	r31, r31
 2de:	59 1b       	sub	r21, r25
 2e0:	99 f0       	breq	.+38     	; 0x308 <__addsf3x+0x60>
 2e2:	59 3f       	cpi	r21, 0xF9	; 249
 2e4:	50 f4       	brcc	.+20     	; 0x2fa <__addsf3x+0x52>
 2e6:	50 3e       	cpi	r21, 0xE0	; 224
 2e8:	68 f1       	brcs	.+90     	; 0x344 <__addsf3x+0x9c>
 2ea:	1a 16       	cp	r1, r26
 2ec:	f0 40       	sbci	r31, 0x00	; 0
 2ee:	a2 2f       	mov	r26, r18
 2f0:	23 2f       	mov	r18, r19
 2f2:	34 2f       	mov	r19, r20
 2f4:	44 27       	eor	r20, r20
 2f6:	58 5f       	subi	r21, 0xF8	; 248
 2f8:	f3 cf       	rjmp	.-26     	; 0x2e0 <__addsf3x+0x38>
 2fa:	46 95       	lsr	r20
 2fc:	37 95       	ror	r19
 2fe:	27 95       	ror	r18
 300:	a7 95       	ror	r26
 302:	f0 40       	sbci	r31, 0x00	; 0
 304:	53 95       	inc	r21
 306:	c9 f7       	brne	.-14     	; 0x2fa <__addsf3x+0x52>
 308:	7e f4       	brtc	.+30     	; 0x328 <__addsf3x+0x80>
 30a:	1f 16       	cp	r1, r31
 30c:	ba 0b       	sbc	r27, r26
 30e:	62 0b       	sbc	r22, r18
 310:	73 0b       	sbc	r23, r19
 312:	84 0b       	sbc	r24, r20
 314:	ba f0       	brmi	.+46     	; 0x344 <__addsf3x+0x9c>
 316:	91 50       	subi	r25, 0x01	; 1
 318:	a1 f0       	breq	.+40     	; 0x342 <__addsf3x+0x9a>
 31a:	ff 0f       	add	r31, r31
 31c:	bb 1f       	adc	r27, r27
 31e:	66 1f       	adc	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	88 1f       	adc	r24, r24
 324:	c2 f7       	brpl	.-16     	; 0x316 <__addsf3x+0x6e>
 326:	0e c0       	rjmp	.+28     	; 0x344 <__addsf3x+0x9c>
 328:	ba 0f       	add	r27, r26
 32a:	62 1f       	adc	r22, r18
 32c:	73 1f       	adc	r23, r19
 32e:	84 1f       	adc	r24, r20
 330:	48 f4       	brcc	.+18     	; 0x344 <__addsf3x+0x9c>
 332:	87 95       	ror	r24
 334:	77 95       	ror	r23
 336:	67 95       	ror	r22
 338:	b7 95       	ror	r27
 33a:	f7 95       	ror	r31
 33c:	9e 3f       	cpi	r25, 0xFE	; 254
 33e:	08 f0       	brcs	.+2      	; 0x342 <__addsf3x+0x9a>
 340:	b0 cf       	rjmp	.-160    	; 0x2a2 <__addsf3+0x28>
 342:	93 95       	inc	r25
 344:	88 0f       	add	r24, r24
 346:	08 f0       	brcs	.+2      	; 0x34a <__addsf3x+0xa2>
 348:	99 27       	eor	r25, r25
 34a:	ee 0f       	add	r30, r30
 34c:	97 95       	ror	r25
 34e:	87 95       	ror	r24
 350:	08 95       	ret

00000352 <__fixsfsi>:
 352:	0e 94 b0 01 	call	0x360	; 0x360 <__fixunssfsi>
 356:	68 94       	set
 358:	b1 11       	cpse	r27, r1
 35a:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_szero>
 35e:	08 95       	ret

00000360 <__fixunssfsi>:
 360:	0e 94 4c 02 	call	0x498	; 0x498 <__fp_splitA>
 364:	88 f0       	brcs	.+34     	; 0x388 <__fixunssfsi+0x28>
 366:	9f 57       	subi	r25, 0x7F	; 127
 368:	98 f0       	brcs	.+38     	; 0x390 <__fixunssfsi+0x30>
 36a:	b9 2f       	mov	r27, r25
 36c:	99 27       	eor	r25, r25
 36e:	b7 51       	subi	r27, 0x17	; 23
 370:	b0 f0       	brcs	.+44     	; 0x39e <__fixunssfsi+0x3e>
 372:	e1 f0       	breq	.+56     	; 0x3ac <__fixunssfsi+0x4c>
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	1a f0       	brmi	.+6      	; 0x384 <__fixunssfsi+0x24>
 37e:	ba 95       	dec	r27
 380:	c9 f7       	brne	.-14     	; 0x374 <__fixunssfsi+0x14>
 382:	14 c0       	rjmp	.+40     	; 0x3ac <__fixunssfsi+0x4c>
 384:	b1 30       	cpi	r27, 0x01	; 1
 386:	91 f0       	breq	.+36     	; 0x3ac <__fixunssfsi+0x4c>
 388:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_zero>
 38c:	b1 e0       	ldi	r27, 0x01	; 1
 38e:	08 95       	ret
 390:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_zero>
 394:	67 2f       	mov	r22, r23
 396:	78 2f       	mov	r23, r24
 398:	88 27       	eor	r24, r24
 39a:	b8 5f       	subi	r27, 0xF8	; 248
 39c:	39 f0       	breq	.+14     	; 0x3ac <__fixunssfsi+0x4c>
 39e:	b9 3f       	cpi	r27, 0xF9	; 249
 3a0:	cc f3       	brlt	.-14     	; 0x394 <__fixunssfsi+0x34>
 3a2:	86 95       	lsr	r24
 3a4:	77 95       	ror	r23
 3a6:	67 95       	ror	r22
 3a8:	b3 95       	inc	r27
 3aa:	d9 f7       	brne	.-10     	; 0x3a2 <__fixunssfsi+0x42>
 3ac:	3e f4       	brtc	.+14     	; 0x3bc <__fixunssfsi+0x5c>
 3ae:	90 95       	com	r25
 3b0:	80 95       	com	r24
 3b2:	70 95       	com	r23
 3b4:	61 95       	neg	r22
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	08 95       	ret

000003be <__floatunsisf>:
 3be:	e8 94       	clt
 3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <__floatsisf+0x12>

000003c2 <__floatsisf>:
 3c2:	97 fb       	bst	r25, 7
 3c4:	3e f4       	brtc	.+14     	; 0x3d4 <__floatsisf+0x12>
 3c6:	90 95       	com	r25
 3c8:	80 95       	com	r24
 3ca:	70 95       	com	r23
 3cc:	61 95       	neg	r22
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	8f 4f       	sbci	r24, 0xFF	; 255
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
 3d4:	99 23       	and	r25, r25
 3d6:	a9 f0       	breq	.+42     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3d8:	f9 2f       	mov	r31, r25
 3da:	96 e9       	ldi	r25, 0x96	; 150
 3dc:	bb 27       	eor	r27, r27
 3de:	93 95       	inc	r25
 3e0:	f6 95       	lsr	r31
 3e2:	87 95       	ror	r24
 3e4:	77 95       	ror	r23
 3e6:	67 95       	ror	r22
 3e8:	b7 95       	ror	r27
 3ea:	f1 11       	cpse	r31, r1
 3ec:	f8 cf       	rjmp	.-16     	; 0x3de <__floatsisf+0x1c>
 3ee:	fa f4       	brpl	.+62     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
 3f0:	bb 0f       	add	r27, r27
 3f2:	11 f4       	brne	.+4      	; 0x3f8 <__floatsisf+0x36>
 3f4:	60 ff       	sbrs	r22, 0
 3f6:	1b c0       	rjmp	.+54     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
 3f8:	6f 5f       	subi	r22, 0xFF	; 255
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	8f 4f       	sbci	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	16 c0       	rjmp	.+44     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
 402:	88 23       	and	r24, r24
 404:	11 f0       	breq	.+4      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 406:	96 e9       	ldi	r25, 0x96	; 150
 408:	11 c0       	rjmp	.+34     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
 40a:	77 23       	and	r23, r23
 40c:	21 f0       	breq	.+8      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 40e:	9e e8       	ldi	r25, 0x8E	; 142
 410:	87 2f       	mov	r24, r23
 412:	76 2f       	mov	r23, r22
 414:	05 c0       	rjmp	.+10     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 416:	66 23       	and	r22, r22
 418:	71 f0       	breq	.+28     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 41a:	96 e8       	ldi	r25, 0x86	; 134
 41c:	86 2f       	mov	r24, r22
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	2a f0       	brmi	.+10     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
 424:	9a 95       	dec	r25
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	88 1f       	adc	r24, r24
 42c:	da f7       	brpl	.-10     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 42e:	88 0f       	add	r24, r24
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	97 f9       	bld	r25, 7
 436:	08 95       	ret

00000438 <__fp_inf>:
 438:	97 f9       	bld	r25, 7
 43a:	9f 67       	ori	r25, 0x7F	; 127
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	08 95       	ret

00000444 <__fp_nan>:
 444:	9f ef       	ldi	r25, 0xFF	; 255
 446:	80 ec       	ldi	r24, 0xC0	; 192
 448:	08 95       	ret

0000044a <__fp_pscA>:
 44a:	00 24       	eor	r0, r0
 44c:	0a 94       	dec	r0
 44e:	16 16       	cp	r1, r22
 450:	17 06       	cpc	r1, r23
 452:	18 06       	cpc	r1, r24
 454:	09 06       	cpc	r0, r25
 456:	08 95       	ret

00000458 <__fp_pscB>:
 458:	00 24       	eor	r0, r0
 45a:	0a 94       	dec	r0
 45c:	12 16       	cp	r1, r18
 45e:	13 06       	cpc	r1, r19
 460:	14 06       	cpc	r1, r20
 462:	05 06       	cpc	r0, r21
 464:	08 95       	ret

00000466 <__fp_round>:
 466:	09 2e       	mov	r0, r25
 468:	03 94       	inc	r0
 46a:	00 0c       	add	r0, r0
 46c:	11 f4       	brne	.+4      	; 0x472 <__fp_round+0xc>
 46e:	88 23       	and	r24, r24
 470:	52 f0       	brmi	.+20     	; 0x486 <__fp_round+0x20>
 472:	bb 0f       	add	r27, r27
 474:	40 f4       	brcc	.+16     	; 0x486 <__fp_round+0x20>
 476:	bf 2b       	or	r27, r31
 478:	11 f4       	brne	.+4      	; 0x47e <__fp_round+0x18>
 47a:	60 ff       	sbrs	r22, 0
 47c:	04 c0       	rjmp	.+8      	; 0x486 <__fp_round+0x20>
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	08 95       	ret

00000488 <__fp_split3>:
 488:	57 fd       	sbrc	r21, 7
 48a:	90 58       	subi	r25, 0x80	; 128
 48c:	44 0f       	add	r20, r20
 48e:	55 1f       	adc	r21, r21
 490:	59 f0       	breq	.+22     	; 0x4a8 <__fp_splitA+0x10>
 492:	5f 3f       	cpi	r21, 0xFF	; 255
 494:	71 f0       	breq	.+28     	; 0x4b2 <__fp_splitA+0x1a>
 496:	47 95       	ror	r20

00000498 <__fp_splitA>:
 498:	88 0f       	add	r24, r24
 49a:	97 fb       	bst	r25, 7
 49c:	99 1f       	adc	r25, r25
 49e:	61 f0       	breq	.+24     	; 0x4b8 <__fp_splitA+0x20>
 4a0:	9f 3f       	cpi	r25, 0xFF	; 255
 4a2:	79 f0       	breq	.+30     	; 0x4c2 <__fp_splitA+0x2a>
 4a4:	87 95       	ror	r24
 4a6:	08 95       	ret
 4a8:	12 16       	cp	r1, r18
 4aa:	13 06       	cpc	r1, r19
 4ac:	14 06       	cpc	r1, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	f2 cf       	rjmp	.-28     	; 0x496 <__fp_split3+0xe>
 4b2:	46 95       	lsr	r20
 4b4:	f1 df       	rcall	.-30     	; 0x498 <__fp_splitA>
 4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <__fp_splitA+0x30>
 4b8:	16 16       	cp	r1, r22
 4ba:	17 06       	cpc	r1, r23
 4bc:	18 06       	cpc	r1, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	f1 cf       	rjmp	.-30     	; 0x4a4 <__fp_splitA+0xc>
 4c2:	86 95       	lsr	r24
 4c4:	71 05       	cpc	r23, r1
 4c6:	61 05       	cpc	r22, r1
 4c8:	08 94       	sec
 4ca:	08 95       	ret

000004cc <__fp_zero>:
 4cc:	e8 94       	clt

000004ce <__fp_szero>:
 4ce:	bb 27       	eor	r27, r27
 4d0:	66 27       	eor	r22, r22
 4d2:	77 27       	eor	r23, r23
 4d4:	cb 01       	movw	r24, r22
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret

000004da <__mulsf3>:
 4da:	0e 94 80 02 	call	0x500	; 0x500 <__mulsf3x>
 4de:	0c 94 33 02 	jmp	0x466	; 0x466 <__fp_round>
 4e2:	0e 94 25 02 	call	0x44a	; 0x44a <__fp_pscA>
 4e6:	38 f0       	brcs	.+14     	; 0x4f6 <__mulsf3+0x1c>
 4e8:	0e 94 2c 02 	call	0x458	; 0x458 <__fp_pscB>
 4ec:	20 f0       	brcs	.+8      	; 0x4f6 <__mulsf3+0x1c>
 4ee:	95 23       	and	r25, r21
 4f0:	11 f0       	breq	.+4      	; 0x4f6 <__mulsf3+0x1c>
 4f2:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_inf>
 4f6:	0c 94 22 02 	jmp	0x444	; 0x444 <__fp_nan>
 4fa:	11 24       	eor	r1, r1
 4fc:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_szero>

00000500 <__mulsf3x>:
 500:	0e 94 44 02 	call	0x488	; 0x488 <__fp_split3>
 504:	70 f3       	brcs	.-36     	; 0x4e2 <__mulsf3+0x8>

00000506 <__mulsf3_pse>:
 506:	95 9f       	mul	r25, r21
 508:	c1 f3       	breq	.-16     	; 0x4fa <__mulsf3+0x20>
 50a:	95 0f       	add	r25, r21
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	55 1f       	adc	r21, r21
 510:	62 9f       	mul	r22, r18
 512:	f0 01       	movw	r30, r0
 514:	72 9f       	mul	r23, r18
 516:	bb 27       	eor	r27, r27
 518:	f0 0d       	add	r31, r0
 51a:	b1 1d       	adc	r27, r1
 51c:	63 9f       	mul	r22, r19
 51e:	aa 27       	eor	r26, r26
 520:	f0 0d       	add	r31, r0
 522:	b1 1d       	adc	r27, r1
 524:	aa 1f       	adc	r26, r26
 526:	64 9f       	mul	r22, r20
 528:	66 27       	eor	r22, r22
 52a:	b0 0d       	add	r27, r0
 52c:	a1 1d       	adc	r26, r1
 52e:	66 1f       	adc	r22, r22
 530:	82 9f       	mul	r24, r18
 532:	22 27       	eor	r18, r18
 534:	b0 0d       	add	r27, r0
 536:	a1 1d       	adc	r26, r1
 538:	62 1f       	adc	r22, r18
 53a:	73 9f       	mul	r23, r19
 53c:	b0 0d       	add	r27, r0
 53e:	a1 1d       	adc	r26, r1
 540:	62 1f       	adc	r22, r18
 542:	83 9f       	mul	r24, r19
 544:	a0 0d       	add	r26, r0
 546:	61 1d       	adc	r22, r1
 548:	22 1f       	adc	r18, r18
 54a:	74 9f       	mul	r23, r20
 54c:	33 27       	eor	r19, r19
 54e:	a0 0d       	add	r26, r0
 550:	61 1d       	adc	r22, r1
 552:	23 1f       	adc	r18, r19
 554:	84 9f       	mul	r24, r20
 556:	60 0d       	add	r22, r0
 558:	21 1d       	adc	r18, r1
 55a:	82 2f       	mov	r24, r18
 55c:	76 2f       	mov	r23, r22
 55e:	6a 2f       	mov	r22, r26
 560:	11 24       	eor	r1, r1
 562:	9f 57       	subi	r25, 0x7F	; 127
 564:	50 40       	sbci	r21, 0x00	; 0
 566:	9a f0       	brmi	.+38     	; 0x58e <__mulsf3_pse+0x88>
 568:	f1 f0       	breq	.+60     	; 0x5a6 <__mulsf3_pse+0xa0>
 56a:	88 23       	and	r24, r24
 56c:	4a f0       	brmi	.+18     	; 0x580 <__mulsf3_pse+0x7a>
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	bb 1f       	adc	r27, r27
 574:	66 1f       	adc	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	88 1f       	adc	r24, r24
 57a:	91 50       	subi	r25, 0x01	; 1
 57c:	50 40       	sbci	r21, 0x00	; 0
 57e:	a9 f7       	brne	.-22     	; 0x56a <__mulsf3_pse+0x64>
 580:	9e 3f       	cpi	r25, 0xFE	; 254
 582:	51 05       	cpc	r21, r1
 584:	80 f0       	brcs	.+32     	; 0x5a6 <__mulsf3_pse+0xa0>
 586:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_inf>
 58a:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_szero>
 58e:	5f 3f       	cpi	r21, 0xFF	; 255
 590:	e4 f3       	brlt	.-8      	; 0x58a <__mulsf3_pse+0x84>
 592:	98 3e       	cpi	r25, 0xE8	; 232
 594:	d4 f3       	brlt	.-12     	; 0x58a <__mulsf3_pse+0x84>
 596:	86 95       	lsr	r24
 598:	77 95       	ror	r23
 59a:	67 95       	ror	r22
 59c:	b7 95       	ror	r27
 59e:	f7 95       	ror	r31
 5a0:	e7 95       	ror	r30
 5a2:	9f 5f       	subi	r25, 0xFF	; 255
 5a4:	c1 f7       	brne	.-16     	; 0x596 <__mulsf3_pse+0x90>
 5a6:	fe 2b       	or	r31, r30
 5a8:	88 0f       	add	r24, r24
 5aa:	91 1d       	adc	r25, r1
 5ac:	96 95       	lsr	r25
 5ae:	87 95       	ror	r24
 5b0:	97 f9       	bld	r25, 7
 5b2:	08 95       	ret

000005b4 <sin>:
 5b4:	9f 93       	push	r25
 5b6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_rempio2>
 5ba:	0f 90       	pop	r0
 5bc:	07 fc       	sbrc	r0, 7
 5be:	ee 5f       	subi	r30, 0xFE	; 254
 5c0:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_sinus>
 5c4:	0c 94 22 02 	jmp	0x444	; 0x444 <__fp_nan>

000005c8 <__fp_rempio2>:
 5c8:	0e 94 4c 02 	call	0x498	; 0x498 <__fp_splitA>
 5cc:	d8 f3       	brcs	.-10     	; 0x5c4 <sin+0x10>
 5ce:	e8 94       	clt
 5d0:	e0 e0       	ldi	r30, 0x00	; 0
 5d2:	bb 27       	eor	r27, r27
 5d4:	9f 57       	subi	r25, 0x7F	; 127
 5d6:	f0 f0       	brcs	.+60     	; 0x614 <__fp_rempio2+0x4c>
 5d8:	2a ed       	ldi	r18, 0xDA	; 218
 5da:	3f e0       	ldi	r19, 0x0F	; 15
 5dc:	49 ec       	ldi	r20, 0xC9	; 201
 5de:	06 c0       	rjmp	.+12     	; 0x5ec <__fp_rempio2+0x24>
 5e0:	ee 0f       	add	r30, r30
 5e2:	bb 0f       	add	r27, r27
 5e4:	66 1f       	adc	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	88 1f       	adc	r24, r24
 5ea:	28 f0       	brcs	.+10     	; 0x5f6 <__fp_rempio2+0x2e>
 5ec:	b2 3a       	cpi	r27, 0xA2	; 162
 5ee:	62 07       	cpc	r22, r18
 5f0:	73 07       	cpc	r23, r19
 5f2:	84 07       	cpc	r24, r20
 5f4:	28 f0       	brcs	.+10     	; 0x600 <__fp_rempio2+0x38>
 5f6:	b2 5a       	subi	r27, 0xA2	; 162
 5f8:	62 0b       	sbc	r22, r18
 5fa:	73 0b       	sbc	r23, r19
 5fc:	84 0b       	sbc	r24, r20
 5fe:	e3 95       	inc	r30
 600:	9a 95       	dec	r25
 602:	72 f7       	brpl	.-36     	; 0x5e0 <__fp_rempio2+0x18>
 604:	80 38       	cpi	r24, 0x80	; 128
 606:	30 f4       	brcc	.+12     	; 0x614 <__fp_rempio2+0x4c>
 608:	9a 95       	dec	r25
 60a:	bb 0f       	add	r27, r27
 60c:	66 1f       	adc	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	88 1f       	adc	r24, r24
 612:	d2 f7       	brpl	.-12     	; 0x608 <__fp_rempio2+0x40>
 614:	90 48       	sbci	r25, 0x80	; 128
 616:	0c 94 23 03 	jmp	0x646	; 0x646 <__fp_mpack_finite>

0000061a <__fp_sinus>:
 61a:	ef 93       	push	r30
 61c:	e0 ff       	sbrs	r30, 0
 61e:	07 c0       	rjmp	.+14     	; 0x62e <__fp_sinus+0x14>
 620:	a2 ea       	ldi	r26, 0xA2	; 162
 622:	2a ed       	ldi	r18, 0xDA	; 218
 624:	3f e0       	ldi	r19, 0x0F	; 15
 626:	49 ec       	ldi	r20, 0xC9	; 201
 628:	5f eb       	ldi	r21, 0xBF	; 191
 62a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3x>
 62e:	0e 94 33 02 	call	0x466	; 0x466 <__fp_round>
 632:	0f 90       	pop	r0
 634:	03 94       	inc	r0
 636:	01 fc       	sbrc	r0, 1
 638:	90 58       	subi	r25, 0x80	; 128
 63a:	e8 e6       	ldi	r30, 0x68	; 104
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_powsodd>

00000642 <__fp_mpack>:
 642:	9f 3f       	cpi	r25, 0xFF	; 255
 644:	31 f0       	breq	.+12     	; 0x652 <__fp_mpack_finite+0xc>

00000646 <__fp_mpack_finite>:
 646:	91 50       	subi	r25, 0x01	; 1
 648:	20 f4       	brcc	.+8      	; 0x652 <__fp_mpack_finite+0xc>
 64a:	87 95       	ror	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	88 0f       	add	r24, r24
 654:	91 1d       	adc	r25, r1
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	97 f9       	bld	r25, 7
 65c:	08 95       	ret

0000065e <__fp_powsodd>:
 65e:	9f 93       	push	r25
 660:	8f 93       	push	r24
 662:	7f 93       	push	r23
 664:	6f 93       	push	r22
 666:	ff 93       	push	r31
 668:	ef 93       	push	r30
 66a:	9b 01       	movw	r18, r22
 66c:	ac 01       	movw	r20, r24
 66e:	0e 94 6d 02 	call	0x4da	; 0x4da <__mulsf3>
 672:	ef 91       	pop	r30
 674:	ff 91       	pop	r31
 676:	0e 94 43 03 	call	0x686	; 0x686 <__fp_powser>
 67a:	2f 91       	pop	r18
 67c:	3f 91       	pop	r19
 67e:	4f 91       	pop	r20
 680:	5f 91       	pop	r21
 682:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__mulsf3>

00000686 <__fp_powser>:
 686:	df 93       	push	r29
 688:	cf 93       	push	r28
 68a:	1f 93       	push	r17
 68c:	0f 93       	push	r16
 68e:	ff 92       	push	r15
 690:	ef 92       	push	r14
 692:	df 92       	push	r13
 694:	7b 01       	movw	r14, r22
 696:	8c 01       	movw	r16, r24
 698:	68 94       	set
 69a:	06 c0       	rjmp	.+12     	; 0x6a8 <__fp_powser+0x22>
 69c:	da 2e       	mov	r13, r26
 69e:	ef 01       	movw	r28, r30
 6a0:	0e 94 80 02 	call	0x500	; 0x500 <__mulsf3x>
 6a4:	fe 01       	movw	r30, r28
 6a6:	e8 94       	clt
 6a8:	a5 91       	lpm	r26, Z+
 6aa:	25 91       	lpm	r18, Z+
 6ac:	35 91       	lpm	r19, Z+
 6ae:	45 91       	lpm	r20, Z+
 6b0:	55 91       	lpm	r21, Z+
 6b2:	a6 f3       	brts	.-24     	; 0x69c <__fp_powser+0x16>
 6b4:	ef 01       	movw	r28, r30
 6b6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3x>
 6ba:	fe 01       	movw	r30, r28
 6bc:	97 01       	movw	r18, r14
 6be:	a8 01       	movw	r20, r16
 6c0:	da 94       	dec	r13
 6c2:	69 f7       	brne	.-38     	; 0x69e <__fp_powser+0x18>
 6c4:	df 90       	pop	r13
 6c6:	ef 90       	pop	r14
 6c8:	ff 90       	pop	r15
 6ca:	0f 91       	pop	r16
 6cc:	1f 91       	pop	r17
 6ce:	cf 91       	pop	r28
 6d0:	df 91       	pop	r29
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
