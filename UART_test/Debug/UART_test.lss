
UART_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000024c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080010a  0080010a  000002ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000065f  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f5  00000000  00000000  00000a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f4  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000362  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cf  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000199d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  9e:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z11BufferWriteP5u8bufh>:

//write to buffer routine

uint8_t BufferWrite(u8buf *buf, uint8_t u8data)
	
{
  a6:	fc 01       	movw	r30, r24

	if (buf->index<BUF_SIZE)
  a8:	84 89       	ldd	r24, Z+20	; 0x14
  aa:	84 31       	cpi	r24, 0x14	; 20
  ac:	50 f4       	brcc	.+20     	; 0xc2 <_Z11BufferWriteP5u8bufh+0x1c>

	{

		buf->buffer[buf->index] = u8data;
  ae:	84 89       	ldd	r24, Z+20	; 0x14
  b0:	df 01       	movw	r26, r30
  b2:	a8 0f       	add	r26, r24
  b4:	b1 1d       	adc	r27, r1
  b6:	6c 93       	st	X, r22

		//increment buffer index

		buf->index++;
  b8:	84 89       	ldd	r24, Z+20	; 0x14
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	84 8b       	std	Z+20, r24	; 0x14

		return 0;
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	08 95       	ret

	}

	else return 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1

}
  c4:	08 95       	ret

000000c6 <_Z19BufferMultipleWriteP5u8bufPha>:
//Multiple writing routine
uint8_t BufferMultipleWrite(u8buf *buf, unsigned char charChain[], int8_t num_elements ){
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	7c 01       	movw	r14, r24
  d2:	8b 01       	movw	r16, r22
  d4:	c4 2f       	mov	r28, r20

	while(num_elements>-1){
  d6:	44 23       	and	r20, r20
  d8:	74 f0       	brlt	.+28     	; 0xf6 <_Z19BufferMultipleWriteP5u8bufPha+0x30>
		
		if(BufferWrite(buf,charChain[num_elements])){
  da:	f8 01       	movw	r30, r16
  dc:	ec 0f       	add	r30, r28
  de:	f1 1d       	adc	r31, r1
  e0:	c7 fd       	sbrc	r28, 7
  e2:	fa 95       	dec	r31
  e4:	60 81       	ld	r22, Z
  e6:	c7 01       	movw	r24, r14
  e8:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11BufferWriteP5u8bufh>
  ec:	81 11       	cpse	r24, r1
  ee:	05 c0       	rjmp	.+10     	; 0xfa <_Z19BufferMultipleWriteP5u8bufPha+0x34>
  f0:	c1 50       	subi	r28, 0x01	; 1

}
//Multiple writing routine
uint8_t BufferMultipleWrite(u8buf *buf, unsigned char charChain[], int8_t num_elements ){

	while(num_elements>-1){
  f2:	9a f7       	brpl	.-26     	; 0xda <_Z19BufferMultipleWriteP5u8bufPha+0x14>
  f4:	03 c0       	rjmp	.+6      	; 0xfc <_Z19BufferMultipleWriteP5u8bufPha+0x36>
			
		}
		num_elements--;
	}
	
	return 0;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	01 c0       	rjmp	.+2      	; 0xfc <_Z19BufferMultipleWriteP5u8bufPha+0x36>

	while(num_elements>-1){
		
		if(BufferWrite(buf,charChain[num_elements])){
			
			return 1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
		num_elements--;
	}
	
	return 0;
	
}
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	08 95       	ret

00000108 <_Z10BufferReadP5u8bufPVh>:

uint8_t BufferRead(u8buf *buf, volatile uint8_t *u8data)

{
 108:	fc 01       	movw	r30, r24

	if(buf->index>0)
 10a:	84 89       	ldd	r24, Z+20	; 0x14
 10c:	88 23       	and	r24, r24
 10e:	59 f0       	breq	.+22     	; 0x126 <_Z10BufferReadP5u8bufPVh+0x1e>

	{

		buf->index--;
 110:	84 89       	ldd	r24, Z+20	; 0x14
 112:	81 50       	subi	r24, 0x01	; 1
 114:	84 8b       	std	Z+20, r24	; 0x14

		*u8data=buf->buffer[buf->index];
 116:	84 89       	ldd	r24, Z+20	; 0x14
 118:	e8 0f       	add	r30, r24
 11a:	f1 1d       	adc	r31, r1
 11c:	80 81       	ld	r24, Z
 11e:	fb 01       	movw	r30, r22
 120:	80 83       	st	Z, r24

		return 0;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret

	}

	else return 1;
 126:	81 e0       	ldi	r24, 0x01	; 1

 128:	08 95       	ret

0000012a <main>:
u8buf my_buffer;
u8buf my_buffer3;


int main()
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	28 97       	sbiw	r28, 0x08	; 8
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	unsigned char USART_TransmitBuffer[8] ="HDPPPP\n"; // Global Buffer
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	e2 e0       	ldi	r30, 0x02	; 2
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	de 01       	movw	r26, r28
 146:	11 96       	adiw	r26, 0x01	; 1
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	8a 95       	dec	r24
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x1e>
	DDRB |= 1 << 5; // Configuring PB5 / D13 as Output
 150:	25 9a       	sbi	0x04, 5	; 4
	
	USART_Init();
 152:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z10USART_Initv>
	
	BufferMultipleWrite(&my_buffer3,USART_TransmitBuffer,data_length);
 156:	40 91 00 01 	lds	r20, 0x0100
 15a:	be 01       	movw	r22, r28
 15c:	6f 5f       	subi	r22, 0xFF	; 255
 15e:	7f 4f       	sbci	r23, 0xFF	; 255
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z19BufferMultipleWriteP5u8bufPha>
	
	
	USART_TransmitInterrupt(&my_buffer3);
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z23USART_TransmitInterruptP5u8buf>

	while (1)
	{
					PORTB |= 1<<5; // Writing HIGH to glow LED
 170:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	89 e6       	ldi	r24, 0x69	; 105
 176:	98 e1       	ldi	r25, 0x18	; 24
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x4e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x58>
 182:	00 00       	nop
					_delay_ms(500);
					PORTB &= ~(1<<5); // Writing LOW
 184:	2d 98       	cbi	0x05, 5	; 5
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	89 e6       	ldi	r24, 0x69	; 105
 18a:	98 e1       	ldi	r25, 0x18	; 24
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x62>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x6c>
 196:	00 00       	nop
 198:	eb cf       	rjmp	.-42     	; 0x170 <main+0x46>

0000019a <_Z10USART_Initv>:

void USART_Init()
{

	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 19a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_PRESCALER;
 19e:	87 e6       	ldi	r24, 0x67	; 103
 1a0:	80 93 c4 00 	sts	0x00C4, r24
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	80 93 c2 00 	sts	0x00C2, r24
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 1aa:	88 e1       	ldi	r24, 0x18	; 24
 1ac:	80 93 c1 00 	sts	0x00C1, r24
	
	//Enable Global Interrupts
	sei();
 1b0:	78 94       	sei
 1b2:	08 95       	ret

000001b4 <_Z23USART_TransmitInterruptP5u8buf>:
}

void USART_TransmitInterrupt(u8buf *Buffer)
{
 1b4:	fc 01       	movw	r30, r24
	tx_buffer = *Buffer;
 1b6:	95 e1       	ldi	r25, 0x15	; 21
 1b8:	af e1       	ldi	r26, 0x1F	; 31
 1ba:	b1 e0       	ldi	r27, 0x01	; 1
 1bc:	01 90       	ld	r0, Z+
 1be:	0d 92       	st	X+, r0
 1c0:	9a 95       	dec	r25
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <_Z23USART_TransmitInterruptP5u8buf+0x8>
	UCSR0B |= DATA_REGISTER_EMPTY_INTERRUPT; // Enables the Interrupt
 1c4:	e1 ec       	ldi	r30, 0xC1	; 193
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <__vector_19>:
}


ISR(USART_UDRE_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	1f 92       	push	r1
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62

		uint8_t data;
		if(!BufferRead(&tx_buffer,&data)){
 1fc:	be 01       	movw	r22, r28
 1fe:	6f 5f       	subi	r22, 0xFF	; 255
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	8f e1       	ldi	r24, 0x1F	; 31
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 84 00 	call	0x108	; 0x108 <_Z10BufferReadP5u8bufPVh>
 20a:	81 11       	cpse	r24, r1
 20c:	04 c0       	rjmp	.+8      	; 0x216 <__vector_19+0x46>
			UDR0 = data;
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	80 93 c6 00 	sts	0x00C6, r24
 214:	05 c0       	rjmp	.+10     	; 0x220 <__vector_19+0x50>
		}
		else{ 
			//all data has been transmitted, disable the interrupt
			UCSR0B &= ~DATA_REGISTER_EMPTY_INTERRUPT; 
 216:	e1 ec       	ldi	r30, 0xC1	; 193
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8f 7d       	andi	r24, 0xDF	; 223
 21e:	80 83       	st	Z, r24
		}
	   
 220:	0f 90       	pop	r0
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
