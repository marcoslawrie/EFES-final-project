
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000586  0000061a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000586  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080010c  0080010c  00000626  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c60  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062d  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000773  00000000  00000000  00001a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000589  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d0  00000000  00000000  00002a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000030ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  9e:	0c 94 c1 02 	jmp	0x582	; 0x582 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z7InitADCPj>:
	ADCSRA |= (1<<ADSC);
}
//disable ADC
void DisableADC(void)
{
	ADCSRA &= ~((1<<ADEN)|(1<<ADIE));
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	20 81       	ld	r18, Z
  ac:	20 66       	ori	r18, 0x60	; 96
  ae:	20 83       	st	Z, r18
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	20 81       	ld	r18, Z
  b6:	2d 6a       	ori	r18, 0xAD	; 173
  b8:	20 83       	st	Z, r18
  ba:	eb e7       	ldi	r30, 0x7B	; 123
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	20 81       	ld	r18, Z
  c0:	23 60       	ori	r18, 0x03	; 3
  c2:	20 83       	st	Z, r18
  c4:	90 93 0d 01 	sts	0x010D, r25
  c8:	80 93 0c 01 	sts	0x010C, r24
  cc:	08 95       	ret

000000ce <_Z13SetADCChannelh>:
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	90 7f       	andi	r25, 0xF0	; 240
  d8:	89 2b       	or	r24, r25
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <_Z8StartADCv>:
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <__vector_21>:
}
//ADC conversion complete ISR
ISR(ADC_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31

	//clear timer compare match flag
	TIFR0=(1<<OCF0A);
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	85 bb       	out	0x15, r24	; 21
	counter++;
 100:	80 91 0e 01 	lds	r24, 0x010E
 104:	90 91 0f 01 	lds	r25, 0x010F
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 0f 01 	sts	0x010F, r25
 10e:	80 93 0e 01 	sts	0x010E, r24
	//toggle pin PD2 to track the end of ADC conversion
	//PIND = (1<<PD2);
	if(counter == 100){
 112:	80 91 0e 01 	lds	r24, 0x010E
 116:	90 91 0f 01 	lds	r25, 0x010F
 11a:	84 36       	cpi	r24, 0x64	; 100
 11c:	91 05       	cpc	r25, r1
 11e:	81 f4       	brne	.+32     	; 0x140 <__vector_21+0x56>
				
		*adcResult = ADCH;
 120:	e0 91 0c 01 	lds	r30, 0x010C
 124:	f0 91 0d 01 	lds	r31, 0x010D
 128:	80 91 79 00 	lds	r24, 0x0079
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	91 83       	std	Z+1, r25	; 0x01
 130:	80 83       	st	Z, r24
		flag = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 10 01 	sts	0x0110, r24
		counter = 0;	
 138:	10 92 0f 01 	sts	0x010F, r1
 13c:	10 92 0e 01 	sts	0x010E, r1
	}

	

 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_Z11BufferWriteP5u8bufh>:

//write to buffer routine

uint8_t BufferWrite(u8buf *buf, uint8_t u8data)
	
{
 152:	fc 01       	movw	r30, r24

	if (buf->index<BUF_SIZE)
 154:	84 89       	ldd	r24, Z+20	; 0x14
 156:	84 31       	cpi	r24, 0x14	; 20
 158:	50 f4       	brcc	.+20     	; 0x16e <_Z11BufferWriteP5u8bufh+0x1c>

	{

		buf->buffer[buf->index] = u8data;
 15a:	84 89       	ldd	r24, Z+20	; 0x14
 15c:	df 01       	movw	r26, r30
 15e:	a8 0f       	add	r26, r24
 160:	b1 1d       	adc	r27, r1
 162:	6c 93       	st	X, r22

		//increment buffer index

		buf->index++;
 164:	84 89       	ldd	r24, Z+20	; 0x14
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	84 8b       	std	Z+20, r24	; 0x14

		return 0;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret

	}

	else return 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1

}
 170:	08 95       	ret

00000172 <_Z19BufferMultipleWriteP5u8bufPca>:
//Multiple writing routine
uint8_t BufferMultipleWrite(u8buf *buf, char charChain[], int8_t num_elements ){
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	8c 01       	movw	r16, r24
 17e:	7b 01       	movw	r14, r22
 180:	c4 2f       	mov	r28, r20

{

	//set index to start of buffer

	buf->index=0;
 182:	fc 01       	movw	r30, r24
 184:	14 8a       	std	Z+20, r1	; 0x14

}
//Multiple writing routine
uint8_t BufferMultipleWrite(u8buf *buf, char charChain[], int8_t num_elements ){
	BufferInit(buf);
	while(num_elements>-1){
 186:	44 23       	and	r20, r20
 188:	7c f0       	brlt	.+30     	; 0x1a8 <_Z19BufferMultipleWriteP5u8bufPca+0x36>
		
		if(BufferWrite(buf,charChain[num_elements-1])){
 18a:	f7 01       	movw	r30, r14
 18c:	ec 0f       	add	r30, r28
 18e:	f1 1d       	adc	r31, r1
 190:	c7 fd       	sbrc	r28, 7
 192:	fa 95       	dec	r31
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	60 81       	ld	r22, Z
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 a9 00 	call	0x152	; 0x152 <_Z11BufferWriteP5u8bufh>
 19e:	81 11       	cpse	r24, r1
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <_Z19BufferMultipleWriteP5u8bufPca+0x3a>
 1a2:	c1 50       	subi	r28, 0x01	; 1

}
//Multiple writing routine
uint8_t BufferMultipleWrite(u8buf *buf, char charChain[], int8_t num_elements ){
	BufferInit(buf);
	while(num_elements>-1){
 1a4:	92 f7       	brpl	.-28     	; 0x18a <_Z19BufferMultipleWriteP5u8bufPca+0x18>
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <_Z19BufferMultipleWriteP5u8bufPca+0x3c>
			
		}
		num_elements--;
	}
	
	return 0;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <_Z19BufferMultipleWriteP5u8bufPca+0x3c>
	BufferInit(buf);
	while(num_elements>-1){
		
		if(BufferWrite(buf,charChain[num_elements-1])){
			
			return 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
		num_elements--;
	}
	
	return 0;
	
}
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <_Z10BufferReadP5u8bufPVh>:

uint8_t BufferRead(u8buf *buf, volatile uint8_t *u8data)

{
 1ba:	fc 01       	movw	r30, r24

	if(buf->index>0)
 1bc:	84 89       	ldd	r24, Z+20	; 0x14
 1be:	88 23       	and	r24, r24
 1c0:	59 f0       	breq	.+22     	; 0x1d8 <_Z10BufferReadP5u8bufPVh+0x1e>

	{

		buf->index--;
 1c2:	84 89       	ldd	r24, Z+20	; 0x14
 1c4:	81 50       	subi	r24, 0x01	; 1
 1c6:	84 8b       	std	Z+20, r24	; 0x14

		*u8data=buf->buffer[buf->index];
 1c8:	84 89       	ldd	r24, Z+20	; 0x14
 1ca:	e8 0f       	add	r30, r24
 1cc:	f1 1d       	adc	r31, r1
 1ce:	80 81       	ld	r24, Z
 1d0:	fb 01       	movw	r30, r22
 1d2:	80 83       	st	Z, r24

		return 0;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret

	}

	else return 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1

 1da:	08 95       	ret

000001dc <_Z8InitPortv>:

//initialize debug ports
void InitPort(void)
{
	//set PD6 and PD2 as output
	DDRD |= (1<<PD2)|(1<<PD6);
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	84 64       	ori	r24, 0x44	; 68
 1e0:	8a b9       	out	0x0a, r24	; 10
 1e2:	08 95       	ret

000001e4 <main>:
}


int main()
{
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	6c 97       	sbiw	r28, 0x1c	; 28
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
	uint16_t convertionResult;
	
	//Initialize USART0
	USART_Init(57600);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	91 ee       	ldi	r25, 0xE1	; 225
 1fc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z10USART_Initj>
	//initialize ports
	InitPort();
 200:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z8InitPortv>
	//initialize ADC
	InitADC(&convertionResult);
 204:	ce 01       	movw	r24, r28
 206:	4b 96       	adiw	r24, 0x1b	; 27
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z7InitADCPj>
	//select ADC channel
	SetADCChannel(0);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 67 00 	call	0xce	; 0xce <_Z13SetADCChannelh>
	//initialize timer0
	InitTimer0();
 212:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z10InitTimer0v>
	//start timer0
	StartTimer0(); //NO needed
 216:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z11StartTimer0v>
	//start conversion
	StartADC();
 21a:	0e 94 6f 00 	call	0xde	; 0xde <_Z8StartADCv>
	//enable global interrupts
	sei();
 21e:	78 94       	sei
	char value[5];
	while(1)
	{
		

		if (flag)
 220:	80 91 10 01 	lds	r24, 0x0110
 224:	88 23       	and	r24, r24
 226:	e1 f3       	breq	.-8      	; 0x220 <main+0x3c>
		{
			
			
			print_string_pooling("ADC values\n",11);
 228:	6b e0       	ldi	r22, 0x0B	; 11
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 11 02 	call	0x422	; 0x422 <_Z20print_string_poolingPcj>
			
			
		
			int2str4dig(convertionResult,value,1);
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	be 01       	movw	r22, r28
 238:	6a 5e       	subi	r22, 0xEA	; 234
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 23e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 240:	0e 94 31 01 	call	0x262	; 0x262 <_Z11int2str4digiPch>
			BufferMultipleWrite(&my_buffer2,value,5);
 244:	45 e0       	ldi	r20, 0x05	; 5
 246:	be 01       	movw	r22, r28
 248:	6a 5e       	subi	r22, 0xEA	; 234
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	ce 01       	movw	r24, r28
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	0e 94 b9 00 	call	0x172	; 0x172 <_Z19BufferMultipleWriteP5u8bufPca>
			USART_TransmitInterrupt(&my_buffer2);
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_Z23USART_TransmitInterruptP5u8buf>
	
			flag=0;
 25c:	10 92 10 01 	sts	0x0110, r1
 260:	df cf       	rjmp	.-66     	; 0x220 <main+0x3c>

00000262 <_Z11int2str4digiPch>:
 *  Author: Marcos
 */ 

#include "format_converter.h"

void int2str4dig(int valueToConvert,char string[],uint8_t addNewLine){
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	8c 01       	movw	r16, r24
 26e:	eb 01       	movw	r28, r22
 270:	f4 2e       	mov	r15, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 272:	4a e0       	ldi	r20, 0x0A	; 10
 274:	0e 94 8c 02 	call	0x518	; 0x518 <__itoa_ncheck>
	itoa(valueToConvert,string,10);
	if(valueToConvert<10){
 278:	0a 30       	cpi	r16, 0x0A	; 10
 27a:	11 05       	cpc	r17, r1
 27c:	3c f4       	brge	.+14     	; 0x28c <_Z11int2str4digiPch+0x2a>
		string[3] = string[0];
 27e:	88 81       	ld	r24, Y
 280:	8b 83       	std	Y+3, r24	; 0x03
		string[0] = '0';
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	88 83       	st	Y, r24
		string[1] = '0';
 286:	89 83       	std	Y+1, r24	; 0x01
		string[2] = '0';
 288:	8a 83       	std	Y+2, r24	; 0x02
 28a:	16 c0       	rjmp	.+44     	; 0x2b8 <_Z11int2str4digiPch+0x56>
	}
	else if(valueToConvert<100){
 28c:	04 36       	cpi	r16, 0x64	; 100
 28e:	11 05       	cpc	r17, r1
 290:	44 f4       	brge	.+16     	; 0x2a2 <_Z11int2str4digiPch+0x40>
		string[2] = string[0];
 292:	88 81       	ld	r24, Y
 294:	8a 83       	std	Y+2, r24	; 0x02
		string[3] = string[1];
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	8b 83       	std	Y+3, r24	; 0x03
		string[0] = '0';
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	88 83       	st	Y, r24
		string[1] = '0';
 29e:	89 83       	std	Y+1, r24	; 0x01
 2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_Z11int2str4digiPch+0x56>
	
	}
	else if(valueToConvert<1000){
 2a2:	08 3e       	cpi	r16, 0xE8	; 232
 2a4:	13 40       	sbci	r17, 0x03	; 3
 2a6:	44 f4       	brge	.+16     	; 0x2b8 <_Z11int2str4digiPch+0x56>
		string[3] = string[2];
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	8b 83       	std	Y+3, r24	; 0x03
		string[2] = string[1];
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	8a 83       	std	Y+2, r24	; 0x02
		string[1] = string[0];
 2b0:	88 81       	ld	r24, Y
 2b2:	89 83       	std	Y+1, r24	; 0x01
		string[0] = '0';
 2b4:	80 e3       	ldi	r24, 0x30	; 48
 2b6:	88 83       	st	Y, r24
	}
	if(addNewLine){string[4] = '\n';}
 2b8:	ff 20       	and	r15, r15
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <_Z11int2str4digiPch+0x5e>
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	8c 83       	std	Y+4, r24	; 0x04
	
	}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	08 95       	ret

000002cc <_Z10InitTimer0v>:
#include "timer0.h"
//initialize timer0
void InitTimer0(void)
{
	//Set Initial Timer value
	TCNT0=0;
 2cc:	16 bc       	out	0x26, r1	; 38
	//Place TOP timer value to Output compare register
	//The value for OCRn has to be calculated as clk_speed/prescalerValue * desired time in seconds - 1
	OCR0A=155; //155 value for 10ms
 2ce:	8b e9       	ldi	r24, 0x9B	; 155
 2d0:	87 bd       	out	0x27, r24	; 39
	//Set CTC mode
	//and make toggle PD6/OC0A pin on compare match
	TCCR0A |=(1<<COM0A0)|(1<<WGM01);
 2d2:	84 b5       	in	r24, 0x24	; 36
 2d4:	82 64       	ori	r24, 0x42	; 66
 2d6:	84 bd       	out	0x24, r24	; 36
 2d8:	08 95       	ret

000002da <_Z11StartTimer0v>:
//start timer0 with prescaller 8
void StartTimer0(void)
{

	//Set prescaller 1024 and start timer
	TCCR0B |=(1<<CS00) | (1<<CS02);
 2da:	85 b5       	in	r24, 0x25	; 37
 2dc:	85 60       	ori	r24, 0x05	; 5
 2de:	85 bd       	out	0x25, r24	; 37
 2e0:	08 95       	ret

000002e2 <_Z10USART_Initj>:

u8buf tx_buffer;
uint16_t baud_rate;

void USART_Init(uint16_t baudRate)
{
 2e2:	cf 92       	push	r12
 2e4:	df 92       	push	r13
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
	baud_rate = baudRate;
 2ea:	90 93 12 01 	sts	0x0112, r25
 2ee:	80 93 11 01 	sts	0x0111, r24
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 2f2:	a0 e0       	ldi	r26, 0x00	; 0
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	aa 1f       	adc	r26, r26
 2fc:	bb 1f       	adc	r27, r27
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	aa 1f       	adc	r26, r26
 304:	bb 1f       	adc	r27, r27
 306:	9c 01       	movw	r18, r24
 308:	ad 01       	movw	r20, r26
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	44 1f       	adc	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	44 1f       	adc	r20, r20
 318:	55 1f       	adc	r21, r21
 31a:	0f 2e       	mov	r0, r31
 31c:	c1 2c       	mov	r12, r1
 31e:	f4 e2       	ldi	r31, 0x24	; 36
 320:	df 2e       	mov	r13, r31
 322:	f4 ef       	ldi	r31, 0xF4	; 244
 324:	ef 2e       	mov	r14, r31
 326:	f1 2c       	mov	r15, r1
 328:	f0 2d       	mov	r31, r0
 32a:	c7 01       	movw	r24, r14
 32c:	b6 01       	movw	r22, r12
 32e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__udivmodsi4>
 332:	da 01       	movw	r26, r20
 334:	c9 01       	movw	r24, r18
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	a1 09       	sbc	r26, r1
 33a:	b1 09       	sbc	r27, r1
 33c:	89 2f       	mov	r24, r25
 33e:	9a 2f       	mov	r25, r26
 340:	ab 2f       	mov	r26, r27
 342:	bb 27       	eor	r27, r27
 344:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = BAUD_PRESCALER;
 348:	20 91 11 01 	lds	r18, 0x0111
 34c:	30 91 12 01 	lds	r19, 0x0112
 350:	c9 01       	movw	r24, r18
 352:	a0 e0       	ldi	r26, 0x00	; 0
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	aa 1f       	adc	r26, r26
 364:	bb 1f       	adc	r27, r27
 366:	9c 01       	movw	r18, r24
 368:	ad 01       	movw	r20, r26
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	44 1f       	adc	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	44 1f       	adc	r20, r20
 378:	55 1f       	adc	r21, r21
 37a:	c7 01       	movw	r24, r14
 37c:	b6 01       	movw	r22, r12
 37e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__udivmodsi4>
 382:	21 50       	subi	r18, 0x01	; 1
 384:	20 93 c4 00 	sts	0x00C4, r18
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	80 93 c2 00 	sts	0x00C2, r24
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 38e:	88 e1       	ldi	r24, 0x18	; 24
 390:	80 93 c1 00 	sts	0x00C1, r24
	
	//Enable Global Interrupts
	sei();
 394:	78 94       	sei
}
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	08 95       	ret

000003a0 <_Z23USART_TransmitInterruptP5u8buf>:

void USART_TransmitInterrupt(u8buf *Buffer)
{
 3a0:	fc 01       	movw	r30, r24
	//We need to check if there is another transmission in progress
	while(UCSR0B & DATA_REGISTER_EMPTY_INTERRUPT){}
 3a2:	a1 ec       	ldi	r26, 0xC1	; 193
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	9c 91       	ld	r25, X
 3a8:	95 fd       	sbrc	r25, 5
 3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <_Z23USART_TransmitInterruptP5u8buf+0x6>
	tx_buffer = *Buffer;
 3ac:	95 e1       	ldi	r25, 0x15	; 21
 3ae:	a3 e1       	ldi	r26, 0x13	; 19
 3b0:	b1 e0       	ldi	r27, 0x01	; 1
 3b2:	01 90       	ld	r0, Z+
 3b4:	0d 92       	st	X+, r0
 3b6:	9a 95       	dec	r25
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <_Z23USART_TransmitInterruptP5u8buf+0x12>
	UCSR0B |= DATA_REGISTER_EMPTY_INTERRUPT; // Enables the Interrupt
 3ba:	e1 ec       	ldi	r30, 0xC1	; 193
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	80 83       	st	Z, r24
	//Enable Global Interrupts
	sei();
 3c4:	78 94       	sei
 3c6:	08 95       	ret

000003c8 <_Z21USART_TransmitPollingP5u8buf>:
}

void USART_TransmitPolling(u8buf *Buffer)
{
 3c8:	cf 92       	push	r12
 3ca:	df 92       	push	r13
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	1f 92       	push	r1
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	7c 01       	movw	r14, r24
	
   uint8_t data;
   while(!BufferRead(Buffer,&data)){
		while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 3e0:	00 ec       	ldi	r16, 0xC0	; 192
 3e2:	10 e0       	ldi	r17, 0x00	; 0
		UDR0 = data;
 3e4:	0f 2e       	mov	r0, r31
 3e6:	f6 ec       	ldi	r31, 0xC6	; 198
 3e8:	cf 2e       	mov	r12, r31
 3ea:	d1 2c       	mov	r13, r1
 3ec:	f0 2d       	mov	r31, r0

void USART_TransmitPolling(u8buf *Buffer)
{
	
   uint8_t data;
   while(!BufferRead(Buffer,&data)){
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <_Z21USART_TransmitPollingP5u8buf+0x36>
		while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 3f0:	f8 01       	movw	r30, r16
 3f2:	90 81       	ld	r25, Z
 3f4:	95 ff       	sbrs	r25, 5
 3f6:	fc cf       	rjmp	.-8      	; 0x3f0 <_Z21USART_TransmitPollingP5u8buf+0x28>
		UDR0 = data;
 3f8:	99 81       	ldd	r25, Y+1	; 0x01
 3fa:	f6 01       	movw	r30, r12
 3fc:	90 83       	st	Z, r25

void USART_TransmitPolling(u8buf *Buffer)
{
	
   uint8_t data;
   while(!BufferRead(Buffer,&data)){
 3fe:	be 01       	movw	r22, r28
 400:	6f 5f       	subi	r22, 0xFF	; 255
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	c7 01       	movw	r24, r14
 406:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z10BufferReadP5u8bufPVh>
 40a:	88 23       	and	r24, r24
 40c:	89 f3       	breq	.-30     	; 0x3f0 <_Z21USART_TransmitPollingP5u8buf+0x28>
		while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
		UDR0 = data;
   }
   
}
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	ff 90       	pop	r15
 41a:	ef 90       	pop	r14
 41c:	df 90       	pop	r13
 41e:	cf 90       	pop	r12
 420:	08 95       	ret

00000422 <_Z20print_string_poolingPcj>:

void print_string_pooling(char string_tx [],uint16_t data_length){
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	65 97       	sbiw	r28, 0x15	; 21
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
 436:	46 2f       	mov	r20, r22
	
	u8buf my_buffer;
	BufferMultipleWrite(&my_buffer,string_tx,data_length);
 438:	bc 01       	movw	r22, r24
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 b9 00 	call	0x172	; 0x172 <_Z19BufferMultipleWriteP5u8bufPca>
	USART_TransmitPolling(&my_buffer);
 442:	ce 01       	movw	r24, r28
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z21USART_TransmitPollingP5u8buf>
	
}
 44a:	65 96       	adiw	r28, 0x15	; 21
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <__vector_19>:


ISR(USART_UDRE_vect)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	1f 92       	push	r1
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62

		uint8_t data;
		if(!BufferRead(&tx_buffer,&data)){
 488:	be 01       	movw	r22, r28
 48a:	6f 5f       	subi	r22, 0xFF	; 255
 48c:	7f 4f       	sbci	r23, 0xFF	; 255
 48e:	83 e1       	ldi	r24, 0x13	; 19
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z10BufferReadP5u8bufPVh>
 496:	81 11       	cpse	r24, r1
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <__vector_19+0x46>
			UDR0 = data;
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	80 93 c6 00 	sts	0x00C6, r24
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__vector_19+0x50>
		}
		else{ 
			//all data has been transmitted, disable the interrupt
			UCSR0B &= ~DATA_REGISTER_EMPTY_INTERRUPT; 
 4a2:	e1 ec       	ldi	r30, 0xC1	; 193
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	8f 7d       	andi	r24, 0xDF	; 223
 4aa:	80 83       	st	Z, r24
		}
	   
 4ac:	0f 90       	pop	r0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <__udivmodsi4>:
 4d4:	a1 e2       	ldi	r26, 0x21	; 33
 4d6:	1a 2e       	mov	r1, r26
 4d8:	aa 1b       	sub	r26, r26
 4da:	bb 1b       	sub	r27, r27
 4dc:	fd 01       	movw	r30, r26
 4de:	0d c0       	rjmp	.+26     	; 0x4fa <__udivmodsi4_ep>

000004e0 <__udivmodsi4_loop>:
 4e0:	aa 1f       	adc	r26, r26
 4e2:	bb 1f       	adc	r27, r27
 4e4:	ee 1f       	adc	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	a2 17       	cp	r26, r18
 4ea:	b3 07       	cpc	r27, r19
 4ec:	e4 07       	cpc	r30, r20
 4ee:	f5 07       	cpc	r31, r21
 4f0:	20 f0       	brcs	.+8      	; 0x4fa <__udivmodsi4_ep>
 4f2:	a2 1b       	sub	r26, r18
 4f4:	b3 0b       	sbc	r27, r19
 4f6:	e4 0b       	sbc	r30, r20
 4f8:	f5 0b       	sbc	r31, r21

000004fa <__udivmodsi4_ep>:
 4fa:	66 1f       	adc	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	1a 94       	dec	r1
 504:	69 f7       	brne	.-38     	; 0x4e0 <__udivmodsi4_loop>
 506:	60 95       	com	r22
 508:	70 95       	com	r23
 50a:	80 95       	com	r24
 50c:	90 95       	com	r25
 50e:	9b 01       	movw	r18, r22
 510:	ac 01       	movw	r20, r24
 512:	bd 01       	movw	r22, r26
 514:	cf 01       	movw	r24, r30
 516:	08 95       	ret

00000518 <__itoa_ncheck>:
 518:	bb 27       	eor	r27, r27
 51a:	4a 30       	cpi	r20, 0x0A	; 10
 51c:	31 f4       	brne	.+12     	; 0x52a <__itoa_ncheck+0x12>
 51e:	99 23       	and	r25, r25
 520:	22 f4       	brpl	.+8      	; 0x52a <__itoa_ncheck+0x12>
 522:	bd e2       	ldi	r27, 0x2D	; 45
 524:	90 95       	com	r25
 526:	81 95       	neg	r24
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	0c 94 98 02 	jmp	0x530	; 0x530 <__utoa_common>

0000052e <__utoa_ncheck>:
 52e:	bb 27       	eor	r27, r27

00000530 <__utoa_common>:
 530:	fb 01       	movw	r30, r22
 532:	55 27       	eor	r21, r21
 534:	aa 27       	eor	r26, r26
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	aa 1f       	adc	r26, r26
 53c:	a4 17       	cp	r26, r20
 53e:	10 f0       	brcs	.+4      	; 0x544 <__utoa_common+0x14>
 540:	a4 1b       	sub	r26, r20
 542:	83 95       	inc	r24
 544:	50 51       	subi	r21, 0x10	; 16
 546:	b9 f7       	brne	.-18     	; 0x536 <__utoa_common+0x6>
 548:	a0 5d       	subi	r26, 0xD0	; 208
 54a:	aa 33       	cpi	r26, 0x3A	; 58
 54c:	08 f0       	brcs	.+2      	; 0x550 <__utoa_common+0x20>
 54e:	a9 5d       	subi	r26, 0xD9	; 217
 550:	a1 93       	st	Z+, r26
 552:	00 97       	sbiw	r24, 0x00	; 0
 554:	79 f7       	brne	.-34     	; 0x534 <__utoa_common+0x4>
 556:	b1 11       	cpse	r27, r1
 558:	b1 93       	st	Z+, r27
 55a:	11 92       	st	Z+, r1
 55c:	cb 01       	movw	r24, r22
 55e:	0c 94 b1 02 	jmp	0x562	; 0x562 <strrev>

00000562 <strrev>:
 562:	dc 01       	movw	r26, r24
 564:	fc 01       	movw	r30, r24
 566:	67 2f       	mov	r22, r23
 568:	71 91       	ld	r23, Z+
 56a:	77 23       	and	r23, r23
 56c:	e1 f7       	brne	.-8      	; 0x566 <strrev+0x4>
 56e:	32 97       	sbiw	r30, 0x02	; 2
 570:	04 c0       	rjmp	.+8      	; 0x57a <strrev+0x18>
 572:	7c 91       	ld	r23, X
 574:	6d 93       	st	X+, r22
 576:	70 83       	st	Z, r23
 578:	62 91       	ld	r22, -Z
 57a:	ae 17       	cp	r26, r30
 57c:	bf 07       	cpc	r27, r31
 57e:	c8 f3       	brcs	.-14     	; 0x572 <strrev+0x10>
 580:	08 95       	ret

00000582 <_exit>:
 582:	f8 94       	cli

00000584 <__stop_program>:
 584:	ff cf       	rjmp	.-2      	; 0x584 <__stop_program>
