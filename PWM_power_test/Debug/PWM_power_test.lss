
PWM_power_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000085a  000008ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000085a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080012e  0080012e  0000091c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f8f  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  00001ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bff  00000000  00000000  000022d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f8  00000000  00000000  00002ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ed  00000000  00000000  000033cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a90  00000000  00000000  00003ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004549  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_1>
   8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_2>
   c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 25 02 	call	0x44a	; 0x44a <main>
  9e:	0c 94 2b 04 	jmp	0x856	; 0x856 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z20InitADCSingleReadingPj>:
	adcResult = ConversionResult;
}
void InitADCSingleReading(uint16_t *ConversionResult){
	// Select Vref=AVcc
	//and set left adjust result
	ADMUX &= 0x0F; //clearing upper nibble of the register to write the new configuration
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	20 81       	ld	r18, Z
  ac:	2f 70       	andi	r18, 0x0F	; 15
  ae:	20 83       	st	Z, r18
	ADMUX |= (1<<REFS0)|(1<<ADLAR);
  b0:	20 81       	ld	r18, Z
  b2:	20 66       	ori	r18, 0x60	; 96
  b4:	20 83       	st	Z, r18
	 //set prescaller to 32 (ADPSx bits)
	 //enable ADC interupt (ADIE bit)
	 //and enable ADC (ADEN bit)
	 ADCSRA = (1<<ADPS2)|(1<<ADPS0)|(1<<ADIE)|(1<<ADEN);
  b6:	2d e8       	ldi	r18, 0x8D	; 141
  b8:	20 93 7a 00 	sts	0x007A, r18
	 adcResult = ConversionResult;
  bc:	90 93 2f 01 	sts	0x012F, r25
  c0:	80 93 2e 01 	sts	0x012E, r24
  c4:	08 95       	ret

000000c6 <_Z13SetADCChannelh>:


void SetADCChannel(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <_Z8StartADCv>:
}
void StartADC(void)
{
	ADCSRA |= (1<<ADSC);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <_Z10DisableADCv>:
}
//disable ADC
void DisableADC(void)
{
	ADCSRA &= ~((1<<ADEN)|(1<<ADIE));
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	87 77       	andi	r24, 0x77	; 119
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <__vector_21>:
}
//ADC conversion complete ISR
ISR(ADC_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	//see if the ADC auto trigger is enable. if not, it is a single reading
	if(ADCSRA & (1<<ADATE)){
 110:	80 91 7a 00 	lds	r24, 0x007A
 114:	85 ff       	sbrs	r24, 5
 116:	23 c0       	rjmp	.+70     	; 0x15e <__vector_21+0x70>
		//clear timer compare match flag
		TIFR0=(1<<OCF0A);
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	85 bb       	out	0x15, r24	; 21
		counter++;
 11c:	80 91 35 01 	lds	r24, 0x0135
 120:	90 91 36 01 	lds	r25, 0x0136
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 36 01 	sts	0x0136, r25
 12a:	80 93 35 01 	sts	0x0135, r24
		//toggle pin PD2 to track the end of ADC conversion
		//PIND = (1<<PD2);
		if(counter == 100){
 12e:	80 91 35 01 	lds	r24, 0x0135
 132:	90 91 36 01 	lds	r25, 0x0136
 136:	84 36       	cpi	r24, 0x64	; 100
 138:	91 05       	cpc	r25, r1
 13a:	11 f5       	brne	.+68     	; 0x180 <__vector_21+0x92>
			
			*adcResult = ADCH;
 13c:	e0 91 2e 01 	lds	r30, 0x012E
 140:	f0 91 2f 01 	lds	r31, 0x012F
 144:	80 91 79 00 	lds	r24, 0x0079
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	91 83       	std	Z+1, r25	; 0x01
 14c:	80 83       	st	Z, r24
			flag = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 34 01 	sts	0x0134, r24
			counter = 0;
 154:	10 92 36 01 	sts	0x0136, r1
 158:	10 92 35 01 	sts	0x0135, r1
 15c:	11 c0       	rjmp	.+34     	; 0x180 <__vector_21+0x92>
		}	
	}
	else{
		*adcResult = ADCH;
 15e:	e0 91 2e 01 	lds	r30, 0x012E
 162:	f0 91 2f 01 	lds	r31, 0x012F
 166:	80 91 79 00 	lds	r24, 0x0079
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	91 83       	std	Z+1, r25	; 0x01
 16e:	80 83       	st	Z, r24
		print_string_pooling("conversion done\n",16);
 170:	60 e1       	ldi	r22, 0x10	; 16
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z20print_string_poolingPcj>
		DisableADC();
 17c:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z10DisableADCv>
	}
	

	

 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <_Z11BufferWriteP5u8bufh>:

//write to buffer routine

uint8_t BufferWrite(u8buf *buf, uint8_t u8data)
	
{
 1a2:	fc 01       	movw	r30, r24

	if (buf->index<BUF_SIZE)
 1a4:	84 89       	ldd	r24, Z+20	; 0x14
 1a6:	84 31       	cpi	r24, 0x14	; 20
 1a8:	50 f4       	brcc	.+20     	; 0x1be <_Z11BufferWriteP5u8bufh+0x1c>

	{

		buf->buffer[buf->index] = u8data;
 1aa:	84 89       	ldd	r24, Z+20	; 0x14
 1ac:	df 01       	movw	r26, r30
 1ae:	a8 0f       	add	r26, r24
 1b0:	b1 1d       	adc	r27, r1
 1b2:	6c 93       	st	X, r22

		//increment buffer index

		buf->index++;
 1b4:	84 89       	ldd	r24, Z+20	; 0x14
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	84 8b       	std	Z+20, r24	; 0x14

		return 0;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret

	}

	else return 1;
 1be:	81 e0       	ldi	r24, 0x01	; 1

}
 1c0:	08 95       	ret

000001c2 <_Z19BufferMultipleWriteP5u8bufPca>:
//Multiple writing routine
uint8_t BufferMultipleWrite(u8buf *buf, char charChain[], int8_t num_elements ){
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	8c 01       	movw	r16, r24
 1ce:	7b 01       	movw	r14, r22

{

	//set index to start of buffer

	buf->index=0;
 1d0:	fc 01       	movw	r30, r24
 1d2:	14 8a       	std	Z+20, r1	; 0x14

}
//Multiple writing routine
uint8_t BufferMultipleWrite(u8buf *buf, char charChain[], int8_t num_elements ){
	BufferInit(buf);
	num_elements--; //to start from the last elements, because num_elements points to the last element + 1 (indexes start at 0)
 1d4:	cf ef       	ldi	r28, 0xFF	; 255
 1d6:	c4 0f       	add	r28, r20
	while(num_elements>-1){
 1d8:	72 f0       	brmi	.+28     	; 0x1f6 <_Z19BufferMultipleWriteP5u8bufPca+0x34>
		
		if(BufferWrite(buf,charChain[num_elements])){ //num_elements-1
 1da:	f7 01       	movw	r30, r14
 1dc:	ec 0f       	add	r30, r28
 1de:	f1 1d       	adc	r31, r1
 1e0:	c7 fd       	sbrc	r28, 7
 1e2:	fa 95       	dec	r31
 1e4:	60 81       	ld	r22, Z
 1e6:	c8 01       	movw	r24, r16
 1e8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z11BufferWriteP5u8bufh>
 1ec:	81 11       	cpse	r24, r1
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <_Z19BufferMultipleWriteP5u8bufPca+0x38>
 1f0:	c1 50       	subi	r28, 0x01	; 1
}
//Multiple writing routine
uint8_t BufferMultipleWrite(u8buf *buf, char charChain[], int8_t num_elements ){
	BufferInit(buf);
	num_elements--; //to start from the last elements, because num_elements points to the last element + 1 (indexes start at 0)
	while(num_elements>-1){
 1f2:	9a f7       	brpl	.-26     	; 0x1da <_Z19BufferMultipleWriteP5u8bufPca+0x18>
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <_Z19BufferMultipleWriteP5u8bufPca+0x3a>
			
		}
		num_elements--;
	}
	
	return 0;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <_Z19BufferMultipleWriteP5u8bufPca+0x3a>
	num_elements--; //to start from the last elements, because num_elements points to the last element + 1 (indexes start at 0)
	while(num_elements>-1){
		
		if(BufferWrite(buf,charChain[num_elements])){ //num_elements-1
			
			return 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
		num_elements--;
	}
	
	return 0;
	
}
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	08 95       	ret

00000208 <_Z10BufferReadP5u8bufPVh>:

uint8_t BufferRead(u8buf *buf, volatile uint8_t *u8data)

{
 208:	fc 01       	movw	r30, r24

	if(buf->index>0)
 20a:	84 89       	ldd	r24, Z+20	; 0x14
 20c:	88 23       	and	r24, r24
 20e:	59 f0       	breq	.+22     	; 0x226 <_Z10BufferReadP5u8bufPVh+0x1e>

	{

		buf->index--;
 210:	84 89       	ldd	r24, Z+20	; 0x14
 212:	81 50       	subi	r24, 0x01	; 1
 214:	84 8b       	std	Z+20, r24	; 0x14

		*u8data=buf->buffer[buf->index];
 216:	84 89       	ldd	r24, Z+20	; 0x14
 218:	e8 0f       	add	r30, r24
 21a:	f1 1d       	adc	r31, r1
 21c:	80 81       	ld	r24, Z
 21e:	fb 01       	movw	r30, r22
 220:	80 83       	st	Z, r24

		return 0;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret

	}

	else return 1;
 226:	81 e0       	ldi	r24, 0x01	; 1

 228:	08 95       	ret

0000022a <_Z11buttonsInitv>:

void buttonsInit(void){
		
		///////////////////////////// INT 0 initialization ///////////////////////////////////////////
		//print_string_pooling("start int0\n",11); //Printing using polling
		DDRD  &= ~( 1UL << DDD2   );     /// Clear the PD2 pin and set PD2 (PCINT0 pin) now as input
 22a:	52 98       	cbi	0x0a, 2	; 10
		PORTD |=  ( 1UL << PORTD2);     /// Set PIN PD2 as INPUT with pull-up enabled
 22c:	5a 9a       	sbi	0x0b, 2	; 11

		EICRA |=  ( 1UL << ISC01 );     /// set INT0 to trigger on Falling edge
 22e:	e9 e6       	ldi	r30, 0x69	; 105
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
		EIFR |= (1UL <<INTF0);
 238:	e0 9a       	sbi	0x1c, 0	; 28
		EIMSK |=  ( 1UL << INT0  );     /// Turns on INT0
 23a:	e8 9a       	sbi	0x1d, 0	; 29
		///////////////////////////// INT 1 initialization ///////////////////////////////////////////
		//print_string_pooling("start int1\n",11); //Printing using polling
		DDRD  &= ~( 1UL << DDD3   );     /// Clear the PD3 pin and set PD3 (PCINT1 pin) now as input
 23c:	53 98       	cbi	0x0a, 3	; 10
		PORTD |=  ( 1UL << PORTD3);     /// Set PIN PD3 as INPUT with pull-up enabled
 23e:	5b 9a       	sbi	0x0b, 3	; 11

		EICRA |=  ( 1UL << ISC11 );     /// set INT1 to trigger on Falling edge
 240:	80 81       	ld	r24, Z
 242:	88 60       	ori	r24, 0x08	; 8
 244:	80 83       	st	Z, r24
		EIFR |= (1UL <<INTF1);
 246:	e1 9a       	sbi	0x1c, 1	; 28
		EIMSK |=  ( 1UL << INT1  );     /// Turns on INT1
 248:	e9 9a       	sbi	0x1d, 1	; 29
		
		//////////////////////////// Change interrupt initialization ///////////////////////////////
		DDRB &= ~(1UL << DDB0); //PB0 (PCINT0) in now an input
 24a:	20 98       	cbi	0x04, 0	; 4
		PORTB |= (1 << PORTB0); // Pull-up enabled in PB0
 24c:	28 9a       	sbi	0x05, 0	; 5
		PCICR |= (1 << PCIE0);     // set PCIE0 to enable pin change interrupt 1
 24e:	e8 e6       	ldi	r30, 0x68	; 104
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 83       	st	Z, r24
		PCMSK0 |= (1 << PCINT0);   // set PCINT0 to trigger an interrupt on state change
 258:	eb e6       	ldi	r30, 0x6B	; 107
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
		PCIFR |= (1<<PCIF0); //clearin flag
 262:	d8 9a       	sbi	0x1b, 0	; 27
		sei();                          /// turn on interrupts
 264:	78 94       	sei
		print_string_pooling("endd conf\n",10); //Printing using polling
 266:	6a e0       	ldi	r22, 0x0A	; 10
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	81 e1       	ldi	r24, 0x11	; 17
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z20print_string_poolingPcj>
 272:	08 95       	ret

00000274 <__vector_3>:
}


ISR (PCINT0_vect){
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
	
	//print_string_pooling("Change ISR\n",11); DEBUG
	if( count_timer0 == 0){ //count_timer0>55 ||
 296:	80 91 32 01 	lds	r24, 0x0132
 29a:	90 91 33 01 	lds	r25, 0x0133
 29e:	89 2b       	or	r24, r25
 2a0:	61 f4       	brne	.+24     	; 0x2ba <__vector_3+0x46>
	//	print_string_pooling("true button press\n",18); DEBUG
		count_timer0++;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 33 01 	sts	0x0133, r25
 2aa:	80 93 32 01 	sts	0x0132, r24
		timer0CTCInit(1024, 250);
 2ae:	6a ef       	ldi	r22, 0xFA	; 250
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	94 e0       	ldi	r25, 0x04	; 4
 2b6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z13timer0CTCInitjj>
		//char value[5]; DEBUG
		//int2str4dig(count_timer0,value,1); //DEBUG
		//print_string_pooling(value,5); //DEBUG
		
	}                      
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_2>:

ISR( INT1_vect ){
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	//print_string_pooling("INT1 ISR\n",9);DEBUG
	if( count_timer0 == 0){ //count_timer0>55 ||
 2fe:	80 91 32 01 	lds	r24, 0x0132
 302:	90 91 33 01 	lds	r25, 0x0133
 306:	89 2b       	or	r24, r25
 308:	61 f4       	brne	.+24     	; 0x322 <__vector_2+0x46>
		//print_string_pooling("true button press\n",18); DEBUG
		count_timer0++;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 33 01 	sts	0x0133, r25
 312:	80 93 32 01 	sts	0x0132, r24
		timer0CTCInit(1024, 155);
 316:	6b e9       	ldi	r22, 0x9B	; 155
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	94 e0       	ldi	r25, 0x04	; 4
 31e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z13timer0CTCInitjj>
		//char value[5]; DEBUG
		//int2str4dig(count_timer0,value,1); DEBUG
		//print_string_pooling(value,5); DEBUG
		
	}                      // again
}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <__vector_1>:

ISR ( INT0_vect ){
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	25 97       	sbiw	r28, 0x05	; 5
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61
	
	//print_string_pooling("INT0 ISR\n",9); DEBUG
	if( count_timer0 == 0){ //count_timer0>55 ||
 374:	80 91 32 01 	lds	r24, 0x0132
 378:	90 91 33 01 	lds	r25, 0x0133
 37c:	89 2b       	or	r24, r25
 37e:	b9 f5       	brne	.+110    	; 0x3ee <__vector_1+0xaa>
		//print_string_pooling("true button press\n",18); DEBUG
		count_timer0++;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 33 01 	sts	0x0133, r25
 388:	80 93 32 01 	sts	0x0132, r24
		timer0CTCInit(1024, 155);
 38c:	6b e9       	ldi	r22, 0x9B	; 155
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	94 e0       	ldi	r25, 0x04	; 4
 394:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z13timer0CTCInitjj>
		//SINGLE READ OF ADC and INIT POWER PWM
		uint16_t temp;
		InitADCSingleReading(&temp);
 398:	ce 01       	movw	r24, r28
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z20InitADCSingleReadingPj>

		SetADCChannel(0);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z13SetADCChannelh>
		StartADC();
 3a6:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8StartADCv>
		while(ADCSRA & (1<<ADSC)); //waiting for the conversion to finish
 3aa:	ea e7       	ldi	r30, 0x7A	; 122
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	86 fd       	sbrc	r24, 6
 3b2:	fd cf       	rjmp	.-6      	; 0x3ae <__vector_1+0x6a>
		//print_string_pooling("conversion done\n",16); DEBUG
		PWM_duty_cycle = temp;
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	9a 81       	ldd	r25, Y+2	; 0x02
 3b8:	90 93 31 01 	sts	0x0131, r25
 3bc:	80 93 30 01 	sts	0x0130, r24
		//Printing result of the conversion
		//int2str4dig(PWM_duty_cycle,value,1); DEBUG
		//BufferMultipleWrite(&my_buffer2,value,5); DEBUG
		//USART_TransmitInterrupt(&my_buffer2); //Using UART with interrupts
		
		if(!((TCCR2A & (1 << WGM20))&& (TCCR2A & (1 << WGM21)))){ //see if PWM of timer 2 is already working or n
 3c0:	80 91 b0 00 	lds	r24, 0x00B0
 3c4:	80 ff       	sbrs	r24, 0
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <__vector_1+0x8c>
 3c8:	80 91 b0 00 	lds	r24, 0x00B0
 3cc:	81 fd       	sbrc	r24, 1
 3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <__vector_1+0x9c>
			fastPWMStart_T2();
 3d0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z15fastPWMStart_T2v>
			print_string_pooling("START T2\n",9);	
 3d4:	69 e0       	ldi	r22, 0x09	; 9
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	8c e1       	ldi	r24, 0x1C	; 28
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z20print_string_poolingPcj>
		}
		setTOPValue(PWM_duty_cycle);
 3e0:	80 91 30 01 	lds	r24, 0x0130
 3e4:	90 91 31 01 	lds	r25, 0x0131
 3e8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_Z11setTOPValueh>
 3ec:	16 c0       	rjmp	.+44     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
		
	}
	else{
		print_string_pooling("Bounce\n",7);
 3ee:	67 e0       	ldi	r22, 0x07	; 7
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	86 e2       	ldi	r24, 0x26	; 38
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z20print_string_poolingPcj>
		char value[5];
		int2str4dig(count_timer0,value,1); //First we need to transform the int values to an array of chars
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	be 01       	movw	r22, r28
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	80 91 32 01 	lds	r24, 0x0132
 406:	90 91 33 01 	lds	r25, 0x0133
 40a:	0e 94 2c 02 	call	0x458	; 0x458 <_Z11int2str4digiPch>
		print_string_pooling(value,5);
 40e:	65 e0       	ldi	r22, 0x05	; 5
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z20print_string_poolingPcj>
		
	}
}
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	bf 91       	pop	r27
 42e:	af 91       	pop	r26
 430:	9f 91       	pop	r25
 432:	8f 91       	pop	r24
 434:	7f 91       	pop	r23
 436:	6f 91       	pop	r22
 438:	5f 91       	pop	r21
 43a:	4f 91       	pop	r20
 43c:	3f 91       	pop	r19
 43e:	2f 91       	pop	r18
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <main>:
volatile uint16_t PWM_duty_cycle = 0;

int main(void)
{
	//Initialize USART0
	USART_Init(57600);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	91 ee       	ldi	r25, 0xE1	; 225
 44e:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z10USART_Initj>
	buttonsInit();
 452:	0e 94 15 01 	call	0x22a	; 0x22a <_Z11buttonsInitv>
volatile uint16_t counter = 0;
volatile uint8_t flag=0;
volatile uint16_t count_timer0 = 0;
volatile uint16_t PWM_duty_cycle = 0;

int main(void)
 456:	ff cf       	rjmp	.-2      	; 0x456 <main+0xc>

00000458 <_Z11int2str4digiPch>:
 *  Author: Marcos
 */ 

#include "format_converter.h"

void int2str4dig(int valueToConvert,char string[],uint8_t addNewLine){
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	8c 01       	movw	r16, r24
 464:	eb 01       	movw	r28, r22
 466:	f4 2e       	mov	r15, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 468:	4a e0       	ldi	r20, 0x0A	; 10
 46a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__itoa_ncheck>
	itoa(valueToConvert,string,10);
	if(valueToConvert<10){
 46e:	0a 30       	cpi	r16, 0x0A	; 10
 470:	11 05       	cpc	r17, r1
 472:	3c f4       	brge	.+14     	; 0x482 <_Z11int2str4digiPch+0x2a>
		string[3] = string[0];
 474:	88 81       	ld	r24, Y
 476:	8b 83       	std	Y+3, r24	; 0x03
		string[0] = '0';
 478:	80 e3       	ldi	r24, 0x30	; 48
 47a:	88 83       	st	Y, r24
		string[1] = '0';
 47c:	89 83       	std	Y+1, r24	; 0x01
		string[2] = '0';
 47e:	8a 83       	std	Y+2, r24	; 0x02
 480:	16 c0       	rjmp	.+44     	; 0x4ae <_Z11int2str4digiPch+0x56>
	}
	else if(valueToConvert<100){
 482:	04 36       	cpi	r16, 0x64	; 100
 484:	11 05       	cpc	r17, r1
 486:	44 f4       	brge	.+16     	; 0x498 <_Z11int2str4digiPch+0x40>
		string[2] = string[0];
 488:	88 81       	ld	r24, Y
 48a:	8a 83       	std	Y+2, r24	; 0x02
		string[3] = string[1];
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	8b 83       	std	Y+3, r24	; 0x03
		string[0] = '0';
 490:	80 e3       	ldi	r24, 0x30	; 48
 492:	88 83       	st	Y, r24
		string[1] = '0';
 494:	89 83       	std	Y+1, r24	; 0x01
 496:	0b c0       	rjmp	.+22     	; 0x4ae <_Z11int2str4digiPch+0x56>
	
	}
	else if(valueToConvert<1000){
 498:	08 3e       	cpi	r16, 0xE8	; 232
 49a:	13 40       	sbci	r17, 0x03	; 3
 49c:	44 f4       	brge	.+16     	; 0x4ae <_Z11int2str4digiPch+0x56>
		string[3] = string[2];
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	8b 83       	std	Y+3, r24	; 0x03
		string[2] = string[1];
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	8a 83       	std	Y+2, r24	; 0x02
		string[1] = string[0];
 4a6:	88 81       	ld	r24, Y
 4a8:	89 83       	std	Y+1, r24	; 0x01
		string[0] = '0';
 4aa:	80 e3       	ldi	r24, 0x30	; 48
 4ac:	88 83       	st	Y, r24
	}
	if(addNewLine){string[4] = '\n';}
 4ae:	ff 20       	and	r15, r15
 4b0:	11 f0       	breq	.+4      	; 0x4b6 <_Z11int2str4digiPch+0x5e>
 4b2:	8a e0       	ldi	r24, 0x0A	; 10
 4b4:	8c 83       	std	Y+4, r24	; 0x04
	
	}
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	ff 90       	pop	r15
 4c0:	08 95       	ret

000004c2 <_Z13timer0CTCInitjj>:
//start timer0 with prescaller 8
void StartTimer0(void)
{

	//Set prescaller 1024 and start timer
	TCCR0B |=(1<<CS00) | (1<<CS02);
 4c2:	9c 01       	movw	r18, r24
 4c4:	95 b5       	in	r25, 0x25	; 37
 4c6:	90 7f       	andi	r25, 0xF0	; 240
 4c8:	95 bd       	out	0x25, r25	; 37
 4ca:	20 34       	cpi	r18, 0x40	; 64
 4cc:	31 05       	cpc	r19, r1
 4ce:	a1 f0       	breq	.+40     	; 0x4f8 <_Z13timer0CTCInitjj+0x36>
 4d0:	20 f4       	brcc	.+8      	; 0x4da <_Z13timer0CTCInitjj+0x18>
 4d2:	28 30       	cpi	r18, 0x08	; 8
 4d4:	31 05       	cpc	r19, r1
 4d6:	a1 f0       	breq	.+40     	; 0x500 <_Z13timer0CTCInitjj+0x3e>
 4d8:	17 c0       	rjmp	.+46     	; 0x508 <_Z13timer0CTCInitjj+0x46>
 4da:	21 15       	cp	r18, r1
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	38 07       	cpc	r19, r24
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <_Z13timer0CTCInitjj+0x2e>
 4e2:	21 15       	cp	r18, r1
 4e4:	34 40       	sbci	r19, 0x04	; 4
 4e6:	81 f4       	brne	.+32     	; 0x508 <_Z13timer0CTCInitjj+0x46>
 4e8:	85 b5       	in	r24, 0x25	; 37
 4ea:	85 60       	ori	r24, 0x05	; 5
 4ec:	85 bd       	out	0x25, r24	; 37
 4ee:	0f c0       	rjmp	.+30     	; 0x50e <_Z13timer0CTCInitjj+0x4c>
 4f0:	85 b5       	in	r24, 0x25	; 37
 4f2:	84 60       	ori	r24, 0x04	; 4
 4f4:	85 bd       	out	0x25, r24	; 37
 4f6:	0b c0       	rjmp	.+22     	; 0x50e <_Z13timer0CTCInitjj+0x4c>
 4f8:	85 b5       	in	r24, 0x25	; 37
 4fa:	83 60       	ori	r24, 0x03	; 3
 4fc:	85 bd       	out	0x25, r24	; 37
 4fe:	07 c0       	rjmp	.+14     	; 0x50e <_Z13timer0CTCInitjj+0x4c>
 500:	85 b5       	in	r24, 0x25	; 37
 502:	82 60       	ori	r24, 0x02	; 2
 504:	85 bd       	out	0x25, r24	; 37
 506:	03 c0       	rjmp	.+6      	; 0x50e <_Z13timer0CTCInitjj+0x4c>
 508:	85 b5       	in	r24, 0x25	; 37
 50a:	81 60       	ori	r24, 0x01	; 1
 50c:	85 bd       	out	0x25, r24	; 37
 50e:	16 bc       	out	0x26, r1	; 38
 510:	67 bd       	out	0x27, r22	; 39
 512:	84 b5       	in	r24, 0x24	; 36
 514:	82 60       	ori	r24, 0x02	; 2
 516:	84 bd       	out	0x24, r24	; 36
 518:	ee e6       	ldi	r30, 0x6E	; 110
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	10 82       	st	Z, r1
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	80 83       	st	Z, r24
 522:	78 94       	sei
 524:	08 95       	ret

00000526 <_Z9StopTimerv>:
}
void StopTimer(void)
{
	TCCR0B &= 0xF0; //no clock source, timer freezed
 526:	85 b5       	in	r24, 0x25	; 37
 528:	80 7f       	andi	r24, 0xF0	; 240
 52a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &=~(1<<OCIE0A);
 52c:	ee e6       	ldi	r30, 0x6E	; 110
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	8d 7f       	andi	r24, 0xFD	; 253
 534:	80 83       	st	Z, r24
	//disable timer 0 interrupts
	TIMSK0 = 0;
 536:	10 82       	st	Z, r1
 538:	08 95       	ret

0000053a <__vector_14>:

}
ISR(TIMER0_COMPA_vect) {
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
	
	count_timer0++;
 55c:	80 91 32 01 	lds	r24, 0x0132
 560:	90 91 33 01 	lds	r25, 0x0133
 564:	01 96       	adiw	r24, 0x01	; 1
	if(count_timer0>20){
 566:	85 31       	cpi	r24, 0x15	; 21
 568:	91 05       	cpc	r25, r1
 56a:	28 f4       	brcc	.+10     	; 0x576 <__vector_14+0x3c>
	TIMSK0 = 0;

}
ISR(TIMER0_COMPA_vect) {
	
	count_timer0++;
 56c:	90 93 33 01 	sts	0x0133, r25
 570:	80 93 32 01 	sts	0x0132, r24
 574:	06 c0       	rjmp	.+12     	; 0x582 <__vector_14+0x48>
	if(count_timer0>20){
		//print_string_pooling("restart counter\n",16); DEBUG LINE
		count_timer0 = 0;
 576:	10 92 33 01 	sts	0x0133, r1
 57a:	10 92 32 01 	sts	0x0132, r1
		StopTimer();
 57e:	0e 94 93 02 	call	0x526	; 0x526 <_Z9StopTimerv>
	}
}
 582:	ff 91       	pop	r31
 584:	ef 91       	pop	r30
 586:	bf 91       	pop	r27
 588:	af 91       	pop	r26
 58a:	9f 91       	pop	r25
 58c:	8f 91       	pop	r24
 58e:	7f 91       	pop	r23
 590:	6f 91       	pop	r22
 592:	5f 91       	pop	r21
 594:	4f 91       	pop	r20
 596:	3f 91       	pop	r19
 598:	2f 91       	pop	r18
 59a:	0f 90       	pop	r0
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	0f 90       	pop	r0
 5a0:	1f 90       	pop	r1
 5a2:	18 95       	reti

000005a4 <_Z15fastPWMStart_T2v>:
	TCCR2A |= (1 << WGM20) | (1 << WGM21); // fast PWM mode
	//TCCR2B |= (1 << WGM22); //waveform generation mode
}
void timer2SetIntOnMatch(){
	TIMSK2 = (1 << OCIE2A); // Call ISR when TCNT2 = OCRA2
	sei(); // Enable interrupts to generate waveform!
 5a4:	23 9a       	sbi	0x04, 3	; 4
 5a6:	80 e2       	ldi	r24, 0x20	; 32
 5a8:	80 93 b3 00 	sts	0x00B3, r24
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 b1 00 	sts	0x00B1, r24
 5b2:	e0 eb       	ldi	r30, 0xB0	; 176
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	80 68       	ori	r24, 0x80	; 128
 5ba:	80 83       	st	Z, r24
 5bc:	80 81       	ld	r24, Z
 5be:	83 60       	ori	r24, 0x03	; 3
 5c0:	80 83       	st	Z, r24
 5c2:	08 95       	ret

000005c4 <_Z11setTOPValueh>:
}
void setTOPValue(uint8_t top){
	OCR2A = top; // Set frequency of generated wave
 5c4:	80 93 b3 00 	sts	0x00B3, r24
 5c8:	08 95       	ret

000005ca <__vector_7>:
}

ISR(TIMER2_COMPA_vect) { // Called when TCNT2 == OCR2A
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
/*	static uint8_t index=0; // Points to each table entry
	OCR1AL = wave[index++]; // Update the PWM output
	asm("NOP;NOP"); // Fine tuning
	TCNT2 = 6; // Timing to compensate for ISR run time*/
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <_Z10USART_Initj>:
	//We need to check if there is another transmission in progress
	while(UCSR0B & DATA_REGISTER_EMPTY_INTERRUPT){}
	tx_buffer = *Buffer;
	UCSR0B |= DATA_REGISTER_EMPTY_INTERRUPT; // Enables the Interrupt
	//Enable Global Interrupts
	sei();
 5de:	cf 92       	push	r12
 5e0:	df 92       	push	r13
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	90 93 38 01 	sts	0x0138, r25
 5ea:	80 93 37 01 	sts	0x0137, r24
 5ee:	a0 e0       	ldi	r26, 0x00	; 0
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	aa 1f       	adc	r26, r26
 5f8:	bb 1f       	adc	r27, r27
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	aa 1f       	adc	r26, r26
 600:	bb 1f       	adc	r27, r27
 602:	9c 01       	movw	r18, r24
 604:	ad 01       	movw	r20, r26
 606:	22 0f       	add	r18, r18
 608:	33 1f       	adc	r19, r19
 60a:	44 1f       	adc	r20, r20
 60c:	55 1f       	adc	r21, r21
 60e:	22 0f       	add	r18, r18
 610:	33 1f       	adc	r19, r19
 612:	44 1f       	adc	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	0f 2e       	mov	r0, r31
 618:	c1 2c       	mov	r12, r1
 61a:	f4 e2       	ldi	r31, 0x24	; 36
 61c:	df 2e       	mov	r13, r31
 61e:	f4 ef       	ldi	r31, 0xF4	; 244
 620:	ef 2e       	mov	r14, r31
 622:	f1 2c       	mov	r15, r1
 624:	f0 2d       	mov	r31, r0
 626:	c7 01       	movw	r24, r14
 628:	b6 01       	movw	r22, r12
 62a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__udivmodsi4>
 62e:	da 01       	movw	r26, r20
 630:	c9 01       	movw	r24, r18
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	a1 09       	sbc	r26, r1
 636:	b1 09       	sbc	r27, r1
 638:	89 2f       	mov	r24, r25
 63a:	9a 2f       	mov	r25, r26
 63c:	ab 2f       	mov	r26, r27
 63e:	bb 27       	eor	r27, r27
 640:	80 93 c5 00 	sts	0x00C5, r24
 644:	20 91 37 01 	lds	r18, 0x0137
 648:	30 91 38 01 	lds	r19, 0x0138
 64c:	c9 01       	movw	r24, r18
 64e:	a0 e0       	ldi	r26, 0x00	; 0
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	aa 1f       	adc	r26, r26
 658:	bb 1f       	adc	r27, r27
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	aa 1f       	adc	r26, r26
 660:	bb 1f       	adc	r27, r27
 662:	9c 01       	movw	r18, r24
 664:	ad 01       	movw	r20, r26
 666:	22 0f       	add	r18, r18
 668:	33 1f       	adc	r19, r19
 66a:	44 1f       	adc	r20, r20
 66c:	55 1f       	adc	r21, r21
 66e:	22 0f       	add	r18, r18
 670:	33 1f       	adc	r19, r19
 672:	44 1f       	adc	r20, r20
 674:	55 1f       	adc	r21, r21
 676:	c7 01       	movw	r24, r14
 678:	b6 01       	movw	r22, r12
 67a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__udivmodsi4>
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	20 93 c4 00 	sts	0x00C4, r18
 684:	86 e0       	ldi	r24, 0x06	; 6
 686:	80 93 c2 00 	sts	0x00C2, r24
 68a:	88 e1       	ldi	r24, 0x18	; 24
 68c:	80 93 c1 00 	sts	0x00C1, r24
 690:	78 94       	sei
 692:	ff 90       	pop	r15
 694:	ef 90       	pop	r14
 696:	df 90       	pop	r13
 698:	cf 90       	pop	r12
 69a:	08 95       	ret

0000069c <_Z21USART_TransmitPollingP5u8buf>:
}

void USART_TransmitPolling(u8buf *Buffer)
{
 69c:	cf 92       	push	r12
 69e:	df 92       	push	r13
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	1f 92       	push	r1
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
 6b2:	7c 01       	movw	r14, r24
	
   uint8_t data;
   while(!BufferRead(Buffer,&data)){
		while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 6b4:	00 ec       	ldi	r16, 0xC0	; 192
 6b6:	10 e0       	ldi	r17, 0x00	; 0
		UDR0 = data;
 6b8:	0f 2e       	mov	r0, r31
 6ba:	f6 ec       	ldi	r31, 0xC6	; 198
 6bc:	cf 2e       	mov	r12, r31
 6be:	d1 2c       	mov	r13, r1
 6c0:	f0 2d       	mov	r31, r0

void USART_TransmitPolling(u8buf *Buffer)
{
	
   uint8_t data;
   while(!BufferRead(Buffer,&data)){
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <_Z21USART_TransmitPollingP5u8buf+0x36>
		while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 6c4:	f8 01       	movw	r30, r16
 6c6:	90 81       	ld	r25, Z
 6c8:	95 ff       	sbrs	r25, 5
 6ca:	fc cf       	rjmp	.-8      	; 0x6c4 <_Z21USART_TransmitPollingP5u8buf+0x28>
		UDR0 = data;
 6cc:	99 81       	ldd	r25, Y+1	; 0x01
 6ce:	f6 01       	movw	r30, r12
 6d0:	90 83       	st	Z, r25

void USART_TransmitPolling(u8buf *Buffer)
{
	
   uint8_t data;
   while(!BufferRead(Buffer,&data)){
 6d2:	be 01       	movw	r22, r28
 6d4:	6f 5f       	subi	r22, 0xFF	; 255
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	c7 01       	movw	r24, r14
 6da:	0e 94 04 01 	call	0x208	; 0x208 <_Z10BufferReadP5u8bufPVh>
 6de:	88 23       	and	r24, r24
 6e0:	89 f3       	breq	.-30     	; 0x6c4 <_Z21USART_TransmitPollingP5u8buf+0x28>
		while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
		UDR0 = data;
   }
   
}
 6e2:	0f 90       	pop	r0
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	df 90       	pop	r13
 6f2:	cf 90       	pop	r12
 6f4:	08 95       	ret

000006f6 <_Z20print_string_poolingPcj>:

void print_string_pooling(char string_tx [],uint16_t data_length){
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	cd b7       	in	r28, 0x3d	; 61
 6fc:	de b7       	in	r29, 0x3e	; 62
 6fe:	65 97       	sbiw	r28, 0x15	; 21
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	de bf       	out	0x3e, r29	; 62
 706:	0f be       	out	0x3f, r0	; 63
 708:	cd bf       	out	0x3d, r28	; 61
 70a:	46 2f       	mov	r20, r22
	
	u8buf my_buffer;
	BufferMultipleWrite(&my_buffer,string_tx,data_length);
 70c:	bc 01       	movw	r22, r24
 70e:	ce 01       	movw	r24, r28
 710:	01 96       	adiw	r24, 0x01	; 1
 712:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z19BufferMultipleWriteP5u8bufPca>
	USART_TransmitPolling(&my_buffer);
 716:	ce 01       	movw	r24, r28
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	0e 94 4e 03 	call	0x69c	; 0x69c <_Z21USART_TransmitPollingP5u8buf>
	
}
 71e:	65 96       	adiw	r28, 0x15	; 21
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	08 95       	ret

00000730 <__vector_19>:


ISR(USART_UDRE_vect)
{
 730:	1f 92       	push	r1
 732:	0f 92       	push	r0
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	0f 92       	push	r0
 738:	11 24       	eor	r1, r1
 73a:	2f 93       	push	r18
 73c:	3f 93       	push	r19
 73e:	4f 93       	push	r20
 740:	5f 93       	push	r21
 742:	6f 93       	push	r22
 744:	7f 93       	push	r23
 746:	8f 93       	push	r24
 748:	9f 93       	push	r25
 74a:	af 93       	push	r26
 74c:	bf 93       	push	r27
 74e:	ef 93       	push	r30
 750:	ff 93       	push	r31
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	1f 92       	push	r1
 758:	cd b7       	in	r28, 0x3d	; 61
 75a:	de b7       	in	r29, 0x3e	; 62

		uint8_t data;
		if(!BufferRead(&tx_buffer,&data)){
 75c:	be 01       	movw	r22, r28
 75e:	6f 5f       	subi	r22, 0xFF	; 255
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	89 e3       	ldi	r24, 0x39	; 57
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	0e 94 04 01 	call	0x208	; 0x208 <_Z10BufferReadP5u8bufPVh>
 76a:	81 11       	cpse	r24, r1
 76c:	04 c0       	rjmp	.+8      	; 0x776 <__vector_19+0x46>
			UDR0 = data;
 76e:	89 81       	ldd	r24, Y+1	; 0x01
 770:	80 93 c6 00 	sts	0x00C6, r24
 774:	05 c0       	rjmp	.+10     	; 0x780 <__vector_19+0x50>
		}
		else{ 
			//all data has been transmitted, disable the interrupt
			UCSR0B &= ~DATA_REGISTER_EMPTY_INTERRUPT; 
 776:	e1 ec       	ldi	r30, 0xC1	; 193
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	8f 7d       	andi	r24, 0xDF	; 223
 77e:	80 83       	st	Z, r24
		}
	   
 780:	0f 90       	pop	r0
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	bf 91       	pop	r27
 78c:	af 91       	pop	r26
 78e:	9f 91       	pop	r25
 790:	8f 91       	pop	r24
 792:	7f 91       	pop	r23
 794:	6f 91       	pop	r22
 796:	5f 91       	pop	r21
 798:	4f 91       	pop	r20
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__udivmodsi4>:
 7a8:	a1 e2       	ldi	r26, 0x21	; 33
 7aa:	1a 2e       	mov	r1, r26
 7ac:	aa 1b       	sub	r26, r26
 7ae:	bb 1b       	sub	r27, r27
 7b0:	fd 01       	movw	r30, r26
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <__udivmodsi4_ep>

000007b4 <__udivmodsi4_loop>:
 7b4:	aa 1f       	adc	r26, r26
 7b6:	bb 1f       	adc	r27, r27
 7b8:	ee 1f       	adc	r30, r30
 7ba:	ff 1f       	adc	r31, r31
 7bc:	a2 17       	cp	r26, r18
 7be:	b3 07       	cpc	r27, r19
 7c0:	e4 07       	cpc	r30, r20
 7c2:	f5 07       	cpc	r31, r21
 7c4:	20 f0       	brcs	.+8      	; 0x7ce <__udivmodsi4_ep>
 7c6:	a2 1b       	sub	r26, r18
 7c8:	b3 0b       	sbc	r27, r19
 7ca:	e4 0b       	sbc	r30, r20
 7cc:	f5 0b       	sbc	r31, r21

000007ce <__udivmodsi4_ep>:
 7ce:	66 1f       	adc	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	88 1f       	adc	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	1a 94       	dec	r1
 7d8:	69 f7       	brne	.-38     	; 0x7b4 <__udivmodsi4_loop>
 7da:	60 95       	com	r22
 7dc:	70 95       	com	r23
 7de:	80 95       	com	r24
 7e0:	90 95       	com	r25
 7e2:	9b 01       	movw	r18, r22
 7e4:	ac 01       	movw	r20, r24
 7e6:	bd 01       	movw	r22, r26
 7e8:	cf 01       	movw	r24, r30
 7ea:	08 95       	ret

000007ec <__itoa_ncheck>:
 7ec:	bb 27       	eor	r27, r27
 7ee:	4a 30       	cpi	r20, 0x0A	; 10
 7f0:	31 f4       	brne	.+12     	; 0x7fe <__itoa_ncheck+0x12>
 7f2:	99 23       	and	r25, r25
 7f4:	22 f4       	brpl	.+8      	; 0x7fe <__itoa_ncheck+0x12>
 7f6:	bd e2       	ldi	r27, 0x2D	; 45
 7f8:	90 95       	com	r25
 7fa:	81 95       	neg	r24
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	0c 94 02 04 	jmp	0x804	; 0x804 <__utoa_common>

00000802 <__utoa_ncheck>:
 802:	bb 27       	eor	r27, r27

00000804 <__utoa_common>:
 804:	fb 01       	movw	r30, r22
 806:	55 27       	eor	r21, r21
 808:	aa 27       	eor	r26, r26
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	aa 1f       	adc	r26, r26
 810:	a4 17       	cp	r26, r20
 812:	10 f0       	brcs	.+4      	; 0x818 <__utoa_common+0x14>
 814:	a4 1b       	sub	r26, r20
 816:	83 95       	inc	r24
 818:	50 51       	subi	r21, 0x10	; 16
 81a:	b9 f7       	brne	.-18     	; 0x80a <__utoa_common+0x6>
 81c:	a0 5d       	subi	r26, 0xD0	; 208
 81e:	aa 33       	cpi	r26, 0x3A	; 58
 820:	08 f0       	brcs	.+2      	; 0x824 <__utoa_common+0x20>
 822:	a9 5d       	subi	r26, 0xD9	; 217
 824:	a1 93       	st	Z+, r26
 826:	00 97       	sbiw	r24, 0x00	; 0
 828:	79 f7       	brne	.-34     	; 0x808 <__utoa_common+0x4>
 82a:	b1 11       	cpse	r27, r1
 82c:	b1 93       	st	Z+, r27
 82e:	11 92       	st	Z+, r1
 830:	cb 01       	movw	r24, r22
 832:	0c 94 1b 04 	jmp	0x836	; 0x836 <strrev>

00000836 <strrev>:
 836:	dc 01       	movw	r26, r24
 838:	fc 01       	movw	r30, r24
 83a:	67 2f       	mov	r22, r23
 83c:	71 91       	ld	r23, Z+
 83e:	77 23       	and	r23, r23
 840:	e1 f7       	brne	.-8      	; 0x83a <strrev+0x4>
 842:	32 97       	sbiw	r30, 0x02	; 2
 844:	04 c0       	rjmp	.+8      	; 0x84e <strrev+0x18>
 846:	7c 91       	ld	r23, X
 848:	6d 93       	st	X+, r22
 84a:	70 83       	st	Z, r23
 84c:	62 91       	ld	r22, -Z
 84e:	ae 17       	cp	r26, r30
 850:	bf 07       	cpc	r27, r31
 852:	c8 f3       	brcs	.-14     	; 0x846 <strrev+0x10>
 854:	08 95       	ret

00000856 <_exit>:
 856:	f8 94       	cli

00000858 <__stop_program>:
 858:	ff cf       	rjmp	.-2      	; 0x858 <__stop_program>
